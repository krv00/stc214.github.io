<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on STC214</title>
		<link>http://stc214.github.io/posts/</link>
		<description>Recent content in Posts on STC214</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 01 Jul 2020 18:33:19 +0800</lastBuildDate>
		<atom:link href="http://stc214.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>共享WIFI使用指南</title>
			<link>http://stc214.github.io/posts/2020_07_01_18_33_15/</link>
			<pubDate>Wed, 01 Jul 2020 18:33:19 +0800</pubDate>
			
			<guid>http://stc214.github.io/posts/2020_07_01_18_33_15/</guid>
			<description>Author : @强攻共享WIFI  各位亲爱的学弟学妹们大家好啊
欢迎使用本@强攻共享WIFI
WIFI不限流量，根据使用人数动态调整带宽
价钱很便宜
本WIFI收费标准为1元/24小时（从缴费开通时算起）
【勉强够电费的，小伙伴们就别嫌贵了。。】
一次对应一台手机
开通上网权限可以通过QQ、微信、吱富宝进行
缴费后加QQ 微信好友进行认证确认后激活权限
目前本WIFI为试运营状态
网络设备每日凌晨四点正重启维护一分钟会导致断网
根据各位小伙伴的使用情况
将酌情调整带宽和添加设备以增加网速和连接信号
支付宝（使用支付宝扫一扫 建议先领红包）
微信(长按后扫一扫)
QQ (扫一扫后添加)
以上 祝大家使用开心~</description>
			<content type="html"><![CDATA[<h4 id="author--强攻共享wifi">Author : @强攻共享WIFI</h4>
<h4 id="avatarhttpsilolinet20200701wxlnkgkzhqprqwdjpg"><img src="https://i.loli.net/2020/07/01/WXLnkGKzHqpRQwD.jpg" alt="avatar"></h4>
<p>各位亲爱的学弟学妹们大家好啊</p>
<p>欢迎使用本@强攻共享WIFI</p>
<p>WIFI不限流量，根据使用人数动态调整带宽</p>
<p>价钱很便宜</p>
<p>本WIFI收费标准为1元/24小时（从缴费开通时算起）</p>
<p>【勉强够电费的，小伙伴们就别嫌贵了。。】</p>
<p>一次对应一台手机</p>
<p>开通上网权限可以通过QQ、微信、吱富宝进行</p>
<p>缴费后加QQ 微信好友进行认证确认后激活权限</p>
<p>目前本WIFI为试运营状态</p>
<p>网络设备每日凌晨四点正重启维护一分钟会导致断网</p>
<p>根据各位小伙伴的使用情况</p>
<p>将酌情调整带宽和添加设备以增加网速和连接信号</p>
<p>支付宝（使用支付宝扫一扫 建议先领红包）</p>
<p><img src="https://i.loli.net/2020/07/01/9BEavqZOb3DpwNM.png" alt="1593598962079.jpg"></p>
<p><img src="https://i.loli.net/2020/07/01/MPsuiQDxjLJTWeZ.jpg" alt="1593598972.jpg"></p>
<p>微信(长按后扫一扫)</p>
<p><img src="https://i.loli.net/2020/07/01/dKW1Uu687MrnApq.jpg" alt="img"><img src="https://i.loli.net/2020/07/01/pqDg4rKd6R5IZ1h.jpg" alt="img"></p>
<p>QQ (扫一扫后添加)</p>
<p><img src="https://i.loli.net/2020/07/01/xVSL8WbCeMuEFOR.jpg" alt="img"></p>
<p><img src="https://i.loli.net/2020/07/01/qgzx7LSBoQaRsdA.jpg" alt="img"></p>
<p>以上 祝大家使用开心~</p>
<p><img src="https://i.loli.net/2020/07/01/EbesyAr3nXvGxiI.jpg" alt="img"></p>
]]></content>
		</item>
		
		<item>
			<title>The &#34;figure&#34; Shortcode</title>
			<link>http://stc214.github.io/posts/the-figure-shortcode/</link>
			<pubDate>Mon, 24 Dec 2018 12:29:41 +0800</pubDate>
			
			<guid>http://stc214.github.io/posts/the-figure-shortcode/</guid>
			<description>Hugo has figure shortcode built in, so you can easily add figcaptions or hyperlink rel attributes to images. Documentations can be found here:
https://gohugo.io/content-management/shortcodes/#figure
This theme has 3 CSS classes made for figure elements:
 big: images will break the width limit of main content area. left: images will float to the left. right: images will float to the right.  If a figure has no class set, the image will behave just like a normal markdown image: !</description>
			<content type="html"><![CDATA[<p>Hugo has <code>figure</code> shortcode built in, so you can easily add figcaptions or hyperlink rel attributes to images. Documentations can be found here:</p>
<p><a href="https://gohugo.io/content-management/shortcodes/#figure">https://gohugo.io/content-management/shortcodes/#figure</a></p>
<p>This theme has 3 CSS classes made for figure elements:</p>
<ul>
<li><code>big</code>: images will break the width limit of main content area.</li>
<li><code>left</code>: images will float to the left.</li>
<li><code>right</code>: images will float to the right.</li>
</ul>
<p>If a figure has no class set, the image will behave just like a normal markdown image: <code>![]()</code>.</p>
<p>Here&rsquo;s some examples, please be aware that these styles only take effect when the page width is over 1300px.</p>
<figure>
    <img src="https://via.placeholder.com/1600x800"
         alt="image"/> <figcaption>
            <p>figure-normal (without any classes)</p>
        </figcaption>
</figure>

<p>Pellentesque posuere sem nec nunc varius, id hendrerit arcu consequat. Maecenas commodo, sapien ut gravida porttitor, dolor risus facilisis enim, eget pharetra nibh nisl porttitor sapien. Proin finibus elementum ligula sit amet hendrerit. Praesent et erat sodales ante accumsan pharetra non eu nulla. Sed vehicula consequat lorem, a fermentum ante faucibus quis. Aliquam erat volutpat. In vitae tincidunt dui. Proin sit amet ligula sodales, elementum tortor et, venenatis sem. Maecenas non nisl erat. Curabitur nec velit eros. Ut cursus lacus nisi, non pretium libero euismod et. Fusce luctus in nisi quis sollicitudin. Aenean nec blandit ligula. Duis ac felis lorem. Proin tellus tellus, dictum nec tempus sit amet, venenatis ac felis. Sed in pharetra nulla, non mollis sem.</p>
<figure class="big">
    <img src="https://via.placeholder.com/1600x800"
         alt="image"/> <figcaption>
            <p>figure-big</p>
        </figcaption>
</figure>

<p>Suspendisse fringilla malesuada massa, in malesuada orci lacinia a. Praesent dapibus faucibus nisl, id volutpat elit bibendum eu. Nulla vitae laoreet nibh, eu hendrerit lacus. Donec lacinia auctor ligula, vel interdum ipsum malesuada vitae. Donec placerat a justo eu gravida. Aenean ultricies imperdiet convallis. Pellentesque accumsan non ex sed euismod. Proin bibendum lectus nec enim faucibus feugiat. Donec hendrerit nisi viverra ornare luctus. Nullam non viverra nisl. Nam vel tellus et tortor elementum volutpat sit amet et erat. Aliquam a libero quis libero porta consectetur. Etiam aliquam felis vel nulla mattis finibus. Mauris laoreet lacus arcu, sed rhoncus odio condimentum sed. Aenean in dui rutrum elit faucibus faucibus nec fringilla augue. Fusce non ornare mauris.</p>
<figure class="left">
    <img src="https://via.placeholder.com/400x280"
         alt="image"/> <figcaption>
            <p>figure-left</p>
        </figcaption>
</figure>

<p>In a libero varius, luctus ligula et, bibendum tortor. Sed sit amet dui malesuada, mattis justo id, ultricies enim. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Aliquam sollicitudin cursus feugiat. Vivamus suscipit ipsum eget lobortis sollicitudin. Fusce vehicula neque tellus. Integer eu posuere quam, id laoreet tortor. Mauris sit amet turpis urna. Donec venenatis tempor dolor, nec laoreet orci aliquet et. Sed condimentum elit eu tristique aliquam. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nunc luctus ipsum sit amet nisl maximus pellentesque.</p>
<figure class="right">
    <img src="https://via.placeholder.com/400x280"
         alt="image"/> <figcaption>
            <p>figure-right</p>
        </figcaption>
</figure>

<p>Pellentesque eu consequat nunc. Vivamus eu eros ut nulla dapibus molestie in id tortor. Cras viverra ligula erat, tincidunt hendrerit diam blandit nec. Cras id urna vel dolor dictum mattis. Vestibulum congue erat ac eros molestie accumsan. Maecenas lorem nibh, maximus vel justo eget, facilisis egestas lectus. Mauris eu est ut odio blandit consequat id feugiat eros. Fusce id suscipit mi, et lacinia lectus. Mauris a arcu placerat dolor iaculis feugiat nec non mi. Ut porttitor elit tortor, eget tempus velit mollis eu. Aliquam sem nulla, dictum cursus mauris ac, semper ullamcorper leo.</p>
<p>Donec nec tincidunt est. Sed id metus in erat fringilla mattis at id turpis. Aliquam tempor vehicula faucibus. Phasellus consequat aliquam odio. Morbi a ex vitae sapien porta auctor. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec sit amet nulla arcu. Praesent ut tortor purus. Praesent id eros diam. Pellentesque vitae dolor at nibh ultrices accumsan eu id urna. Aliquam finibus interdum orci in varius. Pellentesque a enim condimentum, condimentum felis id, vehicula augue. Vivamus cursus commodo eros nec lacinia.</p>
]]></content>
		</item>
		
		<item>
			<title>Post With Featured Image</title>
			<link>http://stc214.github.io/posts/post-with-featured-image/</link>
			<pubDate>Mon, 01 Oct 2018 16:15:09 +0800</pubDate>
			
			<guid>http://stc214.github.io/posts/post-with-featured-image/</guid>
			<description>Just define the image URL in the content’s front matter, the featured image will be displayed as the background.
For example:
---images:- https://picsum.photos/1024/768/?random---This is an array, you can set multiple urls, only the first url will be used. These images is also used in Twitter Cards and the Open Graph metadata.</description>
			<content type="html"><![CDATA[<p>Just define the image URL in the content’s front matter, the featured image will be displayed as the background.</p>
<p>For example:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml">---<span class="w">
</span><span class="w"></span><span class="k">images</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- https<span class="p">:</span>//picsum.photos/<span class="m">1024</span>/<span class="m">768</span>/<span class="p">?</span>random<span class="w">
</span><span class="w"></span>---<span class="w">
</span></code></pre></div><p>This is an array, you can set multiple urls, only the first url will be used. These images is also used in <a href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/guides/getting-started.html">Twitter Cards</a> and the <a href="http://ogp.me/">Open Graph</a> metadata.</p>
]]></content>
		</item>
		
		<item>
			<title>Typography</title>
			<link>http://stc214.github.io/posts/typography/</link>
			<pubDate>Sat, 29 Sep 2018 11:36:33 +0800</pubDate>
			
			<guid>http://stc214.github.io/posts/typography/</guid>
			<description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
 An apple is a sweet, edible fruit produced by an apple tree (Malus pumila).</description>
			<content type="html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<blockquote>
<p>An apple is a sweet, edible fruit produced by an apple tree (Malus pumila). Apple trees are cultivated worldwide, and are the most widely grown species in the genus Malus. The tree originated in Central Asia, where its wild ancestor, Malus sieversii, is still found today. Apples have been grown for thousands of years in Asia and Europe, and were brought to North America by European colonists. Apples have religious and mythological significance in many cultures, including Norse, Greek and European Christian traditions.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
</blockquote>
<hr>
<p>Inline styles：</p>
<p><strong>strong</strong>, <em>emphasis</em>, <em><strong>strong and emphasis</strong></em>,<code>code</code>, <!-- raw HTML omitted -->underline<!-- raw HTML omitted -->, <del>strikethrough</del>, 😂🤣, $\LaTeX$, X^2^, H~2~O, ==highlight==, <a href="https://example.com">Link</a>, and image:</p>
<p><img src="https://picsum.photos/600/400/?random" alt="img"></p>
<hr>
<p>Headings:</p>
<h1 id="heading-1">Heading 1</h1>
<h2 id="heading-2">Heading 2</h2>
<h3 id="heading-3">Heading 3</h3>
<h4 id="heading-4">Heading 4</h4>
<h5 id="heading-5">Heading 5</h5>
<h6 id="heading-6">Heading 6</h6>
<p>Table:</p>
<table>
<thead>
<tr>
<th align="left">Left-Aligned</th>
<th align="center">Center Aligned</th>
<th align="right">Right Aligned</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">col 3 is</td>
<td align="center">some wordy text</td>
<td align="right">$1600</td>
</tr>
<tr>
<td align="left">col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td align="left">zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
</tbody>
</table>
<p>Lists:</p>
<ul>
<li>Unordered list item 1.</li>
<li>Unordered list item 2.</li>
</ul>
<ol>
<li>ordered list item 1.</li>
<li>ordered list item 2.
<ul>
<li>sub-unordered list item 1.</li>
<li>sub-unordered list item 2.
<ul>
<li><input checked="" disabled="" type="checkbox"> something is DONE.</li>
<li><input disabled="" type="checkbox"> something is NOT DONE.</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>Syntax Highlighting:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">,</span> <span class="nx">sum</span>
<span class="nx">num1</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&#34;Enter first number&#34;</span><span class="p">)</span>
<span class="nx">num2</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&#34;Enter second number&#34;</span><span class="p">)</span>
<span class="nx">sum</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num2</span><span class="p">)</span> <span class="c1">// &#34;+&#34; means &#34;add&#34;
</span><span class="c1"></span><span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;Sum = &#34;</span> <span class="o">+</span> <span class="nx">sum</span><span class="p">)</span>  <span class="c1">// &#34;+&#34; means combine into a string
</span></code></pre></div><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>From <a href="https://en.wikipedia.org/wiki/Apple">https://en.wikipedia.org/wiki/Apple</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
		</item>
		
		<item>
			<title>Creating a New Theme</title>
			<link>http://stc214.github.io/posts/creating-a-new-theme/</link>
			<pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/creating-a-new-theme/</guid>
			<description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&rsquo;t cover using CSS to style your theme.</p>
<p>We&rsquo;ll start with creating a new site with a very basic template. Then we&rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.</p>
<p>In this tutorial, commands that you enter will start with the &ldquo;$&rdquo; prompt. The output will follow. Lines that start with &ldquo;#&rdquo; are comments that I&rsquo;ve added to explain a point. When I show updates to a file, the &ldquo;:wq&rdquo; on the last line means to save the file.</p>
<p>Here&rsquo;s an example:</p>
<pre><code>## this is a comment
$ echo this is a command
this is a command

## edit the file
$ vi foo.md
+++
date = &quot;2014-09-28&quot;
title = &quot;creating a new theme&quot;
+++

bah and humbug
:wq

## show it
$ cat foo.md
+++
date = &quot;2014-09-28&quot;
title = &quot;creating a new theme&quot;
+++

bah and humbug
$
</code></pre><h2 id="some-definitions">Some Definitions</h2>
<p>There are a few concepts that you need to understand before creating a theme.</p>
<h3 id="skins">Skins</h3>
<p>Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.</p>
<p>You have two ways to create a skin. The simplest way is to create it in the <code>layouts/</code> directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the <code>layouts/</code> directory so it will always find the skin.</p>
<p>Your second choice is to create it in a sub-directory of the <code>themes/</code> directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?</p>
<p>The difference between creating a skin in <code>layouts/</code> and creating it in <code>themes/</code> is very subtle. A skin in <code>layouts/</code> can’t be customized without updating the templates and static files that it is built from. A skin created in <code>themes/</code>, on the other hand, can be and that makes it easier for other people to use it.</p>
<p>The rest of this tutorial will call a skin created in the <code>themes/</code> directory a theme.</p>
<p>Note that you can use this tutorial to create a skin in the <code>layouts/</code> directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.</p>
<h3 id="the-home-page">The Home Page</h3>
<p>The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.</p>
<h3 id="site-configuration-file">Site Configuration File</h3>
<p>When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.</p>
<p>Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your <code>content/</code> directory and template files in your <code>themes/</code> directory. It will create HTML files in your <code>public/</code> directory. You can change this by specifying alternate locations in the configuration file.</p>
<h3 id="content">Content</h3>
<p>Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.</p>
<h4 id="front-matter">Front Matter</h4>
<p>The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “<code>+++</code>”, YAML by “<code>---</code>”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.</p>
<p>The information in the front matter is passed into the template before the content is rendered into HTML.</p>
<h4 id="markdown">Markdown</h4>
<p>Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.</p>
<h3 id="template-files">Template Files</h3>
<p>Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.</p>
<p>There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.</p>
<p>Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.</p>
<p>Please note that you can use the front matter to influence Hugo’s choice of templates.</p>
<h4 id="single-template">Single Template</h4>
<p>A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.</p>
<h4 id="list-template">List Template</h4>
<p>A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.</p>
<p>The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.</p>
<h4 id="partial-template">Partial Template</h4>
<p>A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.</p>
<h2 id="create-a-new-site">Create a New Site</h2>
<p>Let&rsquo;s use Hugo to create a new web site. I&rsquo;m a Mac user, so I&rsquo;ll create mine in my home directory, in the Sites folder. If you&rsquo;re using Linux, you might have to create the folder first.</p>
<p>The &ldquo;new site&rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.</p>
<pre><code>$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .
drwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre><p>Take a look in the content/ directory to confirm that it is empty.</p>
<p>The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&rsquo;s a topic for a different tutorial, so please ignore them for now.</p>
<h3 id="generate-the-html-for-the-new-site">Generate the HTML For the New Site</h3>
<p>Running the <code>hugo</code> command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&rsquo;s everything that&rsquo;s not content). Since we have an empty site, it won&rsquo;t do much, but it will do it very quickly.</p>
<pre><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
$ 
</code></pre><p>The &ldquo;<code>--verbose</code>&rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &ldquo;INFO:&rdquo; or &ldquo;WARN:&rdquo; is present because we used that flag. The lines that start with &ldquo;WARN:&rdquo; are warning messages. We&rsquo;ll go over them later.</p>
<p>We can verify that the command worked by looking at the directory again.</p>
<pre><code>$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre><p>See that new public/ directory? Hugo placed all generated content there. When you&rsquo;re ready to publish your web site, that&rsquo;s the place to start. For now, though, let&rsquo;s just confirm that we have what we&rsquo;d expect from a site with no content.</p>
<pre><code>$ ls -l public
total 16
-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml
-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml
$ 
</code></pre><p>Hugo created two XML files, which is standard, but there are no HTML files.</p>
<h3 id="test-the-new-site">Test the New Site</h3>
<p>Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &ldquo;server&rdquo; command. If it is successful, you will see output similar to the following:</p>
<pre><code>$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
</code></pre><p>Connect to the listed URL (it&rsquo;s on the line that starts with &ldquo;Web Server&rdquo;). If everything is working correctly, you should get a page that shows the following:</p>
<pre><code>index.xml
sitemap.xml
</code></pre><p>That&rsquo;s a listing of your public/ directory. Hugo didn&rsquo;t create a home page because our site has no content. When there&rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.</p>
<p>Let’s go back and look at those warnings again.</p>
<pre><code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
</code></pre><p>That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.</p>
<p>Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.</p>
<p>I like that the verbose flag causes Hugo to list the files that it&rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&rsquo;t find a template for the home page and it told you so.</p>
<p>At this point, you&rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.</p>
<h2 id="create-a-new-theme">Create a New Theme</h2>
<p>Hugo doesn&rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.</p>
<p>We&rsquo;re going to create a new theme called &ldquo;zafta.&rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.</p>
<p>All themes have opinions on content and layout. For example, Zafta uses &ldquo;post&rdquo; over &ldquo;blog&rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.</p>
<h3 id="create-a-skeleton">Create a Skeleton</h3>
<p>Use the hugo &ldquo;new&rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.</p>
<pre><code>$ hugo new theme zafta

$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes

$ find themes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes/zafta/theme.toml
$ 
</code></pre><p>The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.</p>
<p>Please take a minute to fill out the theme.toml and LICENSE.md files. They&rsquo;re optional, but if you&rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&rsquo;s also nice to declare the license so that people will know how they can use the theme.</p>
<pre><code>$ vi themes/zafta/theme.toml
author = &quot;michael d henderson&quot;
description = &quot;a minimal working template&quot;
license = &quot;MIT&quot;
name = &quot;zafta&quot;
source_repo = &quot;&quot;
tags = [&quot;tags&quot;, &quot;categories&quot;]
:wq

## also edit themes/zafta/LICENSE.md and change
## the bit that says &quot;YOUR_NAME_HERE&quot;
</code></pre><p>Note that the the skeleton&rsquo;s template files are empty. Don&rsquo;t worry, we&rsquo;ll be changing that shortly.</p>
<pre><code>$ find themes/zafta -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
</code></pre><h3 id="update-the-configuration-file-to-use-the-theme">Update the Configuration File to Use the Theme</h3>
<p>Now that we&rsquo;ve got a theme to work with, it&rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &ldquo;-t zafta&rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&rsquo;t put it in the configuration file or specify it on the command line, you won&rsquo;t use the template that you&rsquo;re expecting to.</p>
<p>Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.</p>
<pre><code>$ vi config.toml
theme = &quot;zafta&quot;
baseurl = &quot;&quot;
languageCode = &quot;en-us&quot;
title = &quot;zafta - totally refreshing&quot;
MetaDataFormat = &quot;toml&quot;
:wq

$
</code></pre><h3 id="generate-the-site">Generate the Site</h3>
<p>Now that we have an empty theme, let&rsquo;s generate the site again.</p>
<pre><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
$
</code></pre><p>Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&rsquo;s directory.</p>
<p>Let&rsquo;s check the public/ directory to see what Hugo&rsquo;s created.</p>
<pre><code>$ ls -l public
total 16
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css
-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html
-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js
-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml
$
</code></pre><p>Notice four things:</p>
<ol>
<li>Hugo created a home page. This is the file public/index.html.</li>
<li>Hugo created a css/ directory.</li>
<li>Hugo created a js/ directory.</li>
<li>Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&rsquo;t create any pages. That&rsquo;s because it considers a &ldquo;page&rdquo; to be a file created directly from a content file. It doesn&rsquo;t count things like the index.html files that it creates automatically.</li>
</ol>
<h4 id="the-home-page-1">The Home Page</h4>
<p>Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&rsquo;s warning message shows that it looks for three different templates:</p>
<pre><code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
</code></pre><p>If it can&rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.</p>
<p>When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.</p>
<pre><code>$ find . -name index.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 ./public/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$ 
</code></pre><h4 id="the-magic-of-static">The Magic of Static</h4>
<p>Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.</p>
<p>Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&rsquo;s opinion is that you&rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.</p>
<pre><code>$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes/zafta
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/js
$ 
</code></pre><h2 id="the-theme-development-cycle">The Theme Development Cycle</h2>
<p>When you&rsquo;re working on a theme, you will make changes in the theme&rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:</p>
<ol>
<li>Purge the public/ directory.</li>
<li>Run the built in web server in watch mode.</li>
<li>Open your site in a browser.</li>
<li>Update the theme.</li>
<li>Glance at your browser window to see changes.</li>
<li>Return to step 4.</li>
</ol>
<p>I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.</p>
<p>Check the main Hugo site for information on using Git with Hugo.</p>
<h3 id="purge-the-public-directory">Purge the public/ Directory</h3>
<p>When generating the site, Hugo will create new files and update existing ones in the <code>public/</code> directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.</p>
<p>Note: If you&rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.</p>
<h3 id="hugos-watch-option">Hugo&rsquo;s Watch Option</h3>
<p>Hugo&rsquo;s &ldquo;<code>--watch</code>&rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.</p>
<h3 id="live-reload">Live Reload</h3>
<p>Hugo&rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &ldquo;Wow, that&rsquo;s totally amazing.&rdquo;</p>
<h3 id="development-commands">Development Commands</h3>
<p>Use the following commands as the basis for your workflow.</p>
<pre><code>## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
</code></pre><p>Here&rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&rsquo;ve said this before, it&rsquo;s amazing.</p>
<pre><code>$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&quot;: MODIFY|ATTRIB]
Change detected, rebuilding site

WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 1 ms
</code></pre><h2 id="update-the-home-page-template">Update the Home Page Template</h2>
<p>The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&rsquo;s layout/ directory:</p>
<ol>
<li>index.html</li>
<li>_default/list.html</li>
<li>_default/single.html</li>
</ol>
<p>We could update one of the default templates, but a good design decision is to update the most specific template available. That&rsquo;s not a hard and fast rule (in fact, we&rsquo;ll break it a few times in this tutorial), but it is a good generalization.</p>
<h3 id="make-a-static-home-page">Make a Static Home Page</h3>
<p>Right now, that page is empty because we don&rsquo;t have any content and we don&rsquo;t have any logic in the template. Let&rsquo;s change that by adding some text to the template.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt; 
&lt;html&gt; 
&lt;body&gt; 
  &lt;p&gt;hugo says hello!&lt;/p&gt; 
&lt;/body&gt; 
&lt;/html&gt; 
:wq

$
</code></pre><p>Build the web site and then verify the results.</p>
<pre><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public/index.html

$ cat public/index.html 
&lt;!DOCTYPE html&gt; 
&lt;html&gt; 
&lt;body&gt; 
  &lt;p&gt;hugo says hello!&lt;/p&gt; 
&lt;/html&gt;
</code></pre><h4 id="live-reload-1">Live Reload</h4>
<p>Note: If you&rsquo;re running the server with the <code>--watch</code> option, you&rsquo;ll see different content in the file:</p>
<pre><code>$ cat public/index.html 
&lt;!DOCTYPE html&gt; 
&lt;html&gt; 
&lt;body&gt; 
  &lt;p&gt;hugo says hello!&lt;/p&gt; 
&lt;script&gt;document.write('&lt;script src=&quot;http://' 
        + (location.host || 'localhost').split(':')[0] 
    + ':1313/livereload.js?mindelay=10&quot;&gt;&lt;/' 
        + 'script&gt;')&lt;/script&gt;&lt;/body&gt; 
&lt;/html&gt;
</code></pre><p>When you use <code>--watch</code>, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.</p>
<h3 id="build-a-dynamic-home-page">Build a &ldquo;Dynamic&rdquo; Home Page</h3>
<p>&ldquo;Dynamic home page?&rdquo; Hugo&rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&rsquo;ll use iteration in the template to do that.</p>
<h4 id="create-new-posts">Create New Posts</h4>
<p>Now that we have the home page generating static content, let&rsquo;s add some content to the site. We&rsquo;ll display these posts as a list on the home page and on their own page, too.</p>
<p>Hugo has a command to generate a skeleton post, just like it does for sites and themes.</p>
<pre><code>$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &lt;nil&gt; to map[string]interface{}

$ 
</code></pre><p>That wasn&rsquo;t very nice, was it?</p>
<p>The &ldquo;new&rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.</p>
<pre><code>$ vi themes/zafta/archetypes/post.md
+++
Description = &quot;&quot;
Tags = []
Categories = []
+++
:wq

$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff   0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff  51 Sep 29 21:54 themes/zafta/archetypes/post.md

$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created

$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created

$ ls -l content/post
total 16
-rw-r--r--  1 quoha  staff  104 Sep 29 21:54 first.md
-rw-r--r--  1 quoha  staff  105 Sep 29 21:57 second.md

$ cat content/post/first.md 
+++
Categories = []
Description = &quot;&quot;
Tags = []
date = &quot;2014-09-29T21:54:53-05:00&quot;
title = &quot;first&quot;

+++
my first post

$ cat content/post/second.md 
+++
Categories = []
Description = &quot;&quot;
Tags = []
date = &quot;2014-09-29T21:57:09-05:00&quot;
title = &quot;second&quot;

+++
my second post

$ 
</code></pre><p>Build the web site and then verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;category&quot;:&quot;categories&quot;, &quot;tag&quot;:&quot;tags&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms
$
</code></pre><p>The output says that it created 2 pages. Those are our new posts:</p>
<pre><code>$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/second/index.html
$
</code></pre><p>The new files are empty because because the templates used to generate the content are empty. The homepage doesn&rsquo;t show the new content, either. We have to update the templates to add the posts.</p>
<h3 id="list-and-single-templates">List and Single Templates</h3>
<p>In Hugo, we have three major kinds of templates. There&rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &ldquo;single&rdquo; templates which are used to generate output for a single content file. We also have &ldquo;list&rdquo; templates that are used to group multiple pieces of content before generating output.</p>
<p>Generally speaking, list templates are named &ldquo;list.html&rdquo; and single templates are named &ldquo;single.html.&rdquo;</p>
<p>There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.</p>
<h3 id="add-content-to-the-homepage">Add Content to the Homepage</h3>
<p>The home page will contain a list of posts. Let&rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.</p>
<pre><code>$ vi themes/zafta/layouts/index.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &ldquo;{{&rdquo; and &ldquo;}}&rdquo;. In our template, the commands are:</p>
<ol>
<li>range</li>
<li>.Title</li>
<li>end</li>
</ol>
<p>The &ldquo;range&rdquo; command is an iterator. We&rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.</p>
<p>The &ldquo;.Title&rdquo; command prints the value of the &ldquo;title&rdquo; variable. Hugo pulls it from the front matter in the Markdown file.</p>
<p>The &ldquo;end&rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &ldquo;end.&rdquo; Everything between the &ldquo;range&rdquo; and &ldquo;end&rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.</p>
<p>It&rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.</p>
<p>Build the web site and then verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l 
-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  
    &lt;h1&gt;second&lt;/h1&gt;
  
    &lt;h1&gt;first&lt;/h1&gt;
  
&lt;/body&gt;
&lt;/html&gt;
$
</code></pre><p>Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&rsquo;s take a moment to appreciate what we&rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&rsquo;ve learned everything you need to know to build a theme. All that&rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.</p>
<p>And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&rsquo;t worry, though, that&rsquo;s all to come.</p>
<h3 id="add-content-to-the-posts">Add Content to the Posts</h3>
<p>We&rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &ldquo;post&rdquo; (and if we don&rsquo;t do something weird, their type is also &ldquo;post&rdquo;).</p>
<p>Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.</p>
<p>Now that we know the search rule, let&rsquo;s see what we actually have available:</p>
<pre><code>$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r--  1 quoha  staff  132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
</code></pre><p>We could create a new template, post/single.html, or change the default. Since we don&rsquo;t know of any other content types, let&rsquo;s start with updating the default.</p>
<p>Remember, any content that we haven&rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&rsquo;re going to be adding different types of content and we&rsquo;re going to end up undoing some of the changes we&rsquo;ve made. It&rsquo;s good because we&rsquo;ll be able to see immediate results. It&rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&rsquo;ll accept the cost and proceed.</p>
<p>Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&rsquo;s a refreshing amount of joy right there.</p>
<h4 id="update-the-template-file">Update the Template File</h4>
<pre><code>$ vi themes/zafta/layouts/_default/single.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Build the web site and verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public/post/second/index.html

$ cat public/post/first/index.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;first&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;first&lt;/h1&gt;
  &lt;p&gt;my first post&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;

$ cat public/post/second/index.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;second&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;second&lt;/h1&gt;
  &lt;p&gt;my second post&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
$
</code></pre><p>Notice that the posts now have content. You can go to localhost:1313/post/first to verify.</p>
<h3 id="linking-to-content">Linking to Content</h3>
<p>The posts are on the home page. Let&rsquo;s add a link from there to the post. Since this is the home page, we&rsquo;ll update its template.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Build the web site and verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public/post/second/index.html

$ cat public/index.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  
    &lt;h1&gt;&lt;a href=&quot;/post/second/&quot;&gt;second&lt;/a&gt;&lt;/h1&gt;
  
    &lt;h1&gt;&lt;a href=&quot;/post/first/&quot;&gt;first&lt;/a&gt;&lt;/h1&gt;
  
&lt;/body&gt;
&lt;/html&gt;

$
</code></pre><h3 id="create-a-post-listing">Create a Post Listing</h3>
<p>We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&rsquo;s make it show a list of all posts (not just the first ten).</p>
<p>We need to decide which template to update. This will be a listing, so it should be a list template. Let&rsquo;s take a quick look and see which list templates are available.</p>
<pre><code>$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
</code></pre><p>As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&rsquo;t have multiple content types, so let&rsquo;s stay consistent and update the default list template.</p>
<h2 id="creating-top-level-pages">Creating Top Level Pages</h2>
<p>Let&rsquo;s add an &ldquo;about&rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).</p>
<p>The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&rsquo;s verify that by creating an &ldquo;about&rdquo; page at the top level:</p>
<pre><code>$ vi content/about.md 
+++
title = &quot;about&quot;
description = &quot;about this site&quot;
date = &quot;2014-09-27&quot;
slug = &quot;about time&quot;
+++

## about us

i'm speechless
:wq
</code></pre><p>Generate the web site and verify the results.</p>
<pre><code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r--  1 mdhender  staff   334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff   527 Sep 27 15:08 public/index.html
-rw-rw-r--  1 mdhender  staff   358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff     0 Sep 27 15:08 public/post/index.html
-rw-rw-r--  1 mdhender  staff   342 Sep 27 15:08 public/post/second-post/index.html
</code></pre><p>Notice that the page wasn&rsquo;t created at the top level. It was created in a sub-directory named &lsquo;about-time/&rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It&rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.</p>
<p>One other thing. Take a look at the home page.</p>
<pre><code>$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/theme/&quot;&gt;creating a new theme&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/about-time/&quot;&gt;about&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/second-post/&quot;&gt;second&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/first-post/&quot;&gt;first&lt;/a&gt;&lt;/h1&gt;
&lt;script&gt;document.write('&lt;script src=&quot;http://'
        + (location.host || 'localhost').split(':')[0]
		+ ':1313/livereload.js?mindelay=10&quot;&gt;&lt;/'
        + 'script&gt;')&lt;/script&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Notice that the &ldquo;about&rdquo; link is listed with the posts? That&rsquo;s not desirable, so let&rsquo;s change that first.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;h1&gt;posts&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &quot;post&quot;}}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if eq .Type &quot;page&quot; }}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre><p>Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.</p>
<p>But, that about page still renders to about-time/index.html.</p>
<pre><code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r--  1 mdhender  staff    334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff    645 Sep 27 15:33 public/index.html
-rw-rw-r--  1 mdhender  staff    358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff      0 Sep 27 15:33 public/post/index.html
-rw-rw-r--  1 mdhender  staff    342 Sep 27 15:33 public/post/second-post/index.html
</code></pre><p>Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&rsquo;s do it the hard way and change the permalink in the configuration file.</p>
<pre><code>$ vi config.toml
[permalinks]
	page = &quot;/:title/&quot;
	about = &quot;/:filename/&quot;
</code></pre><p>Generate the web site and verify that this didn&rsquo;t work. Hugo lets &ldquo;slug&rdquo; or &ldquo;URL&rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.</p>
<h2 id="sharing-templates">Sharing Templates</h2>
<p>If you&rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&rsquo;t. That&rsquo;s because we didn&rsquo;t put the title in the home page&rsquo;s template (layouts/index.html). That&rsquo;s an easy thing to do, but let&rsquo;s look at a different option.</p>
<p>We can put the common bits into a shared template that&rsquo;s stored in the themes/zafta/layouts/partials/ directory.</p>
<h3 id="create-the-header-and-footer-partials">Create the Header and Footer Partials</h3>
<p>In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&rsquo;s presentation.</p>
<pre><code>$ vi themes/zafta/layouts/partials/header.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
:wq

$ vi themes/zafta/layouts/partials/footer.html
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre><h3 id="update-the-home-page-template-to-use-the-partials">Update the Home Page Template to Use the Partials</h3>
<p>The most noticeable difference between a template call and a partials call is the lack of path:</p>
<pre><code>{{ template &quot;theme/partials/header.html&quot; . }}
</code></pre><p>versus</p>
<pre><code>{{ partial &quot;header.html&quot; . }}
</code></pre><p>Both pass in the context.</p>
<p>Let&rsquo;s change the home page template to use these new partials.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;posts&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &quot;post&quot;}}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if or (eq .Type &quot;page&quot;) (eq .Type &quot;about&quot;) }}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The title on the home page is now &ldquo;your title here&rdquo;, which comes from the &ldquo;title&rdquo; variable in the config.toml file.</p>
<h3 id="update-the-default-single-template-to-use-the-partials">Update the Default Single Template to Use the Partials</h3>
<pre><code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.</p>
<h2 id="add-date-published-to-posts">Add “Date Published” to Posts</h2>
<p>It&rsquo;s common to have posts display the date that they were written or published, so let&rsquo;s add that. The front matter of our posts has a variable named &ldquo;date.&rdquo; It&rsquo;s usually the date the content was created, but let&rsquo;s pretend that&rsquo;s the value we want to display.</p>
<h3 id="add-date-published-to-the-template">Add “Date Published” to the Template</h3>
<p>We&rsquo;ll start by updating the template used to render the posts. The template code will look like:</p>
<pre><code>{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}
</code></pre><p>Posts use the default single template, so we&rsquo;ll change that file.</p>
<pre><code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The posts now have the date displayed in them. There&rsquo;s a problem, though. The &ldquo;about&rdquo; page also has the date displayed.</p>
<p>As usual, there are a couple of ways to make the date display only on posts. We could do an &ldquo;if&rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.</p>
<p>The &ldquo;if&rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &ldquo;code for today,&rdquo; too.</p>
<p>Let&rsquo;s assume, though, that we&rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&rsquo;re going to create a section template.</p>
<p>Let&rsquo;s restore the default single template before we forget.</p>
<pre><code>$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Now we&rsquo;ll update the post&rsquo;s version of the single template. If you remember Hugo&rsquo;s rules, the template engine will use this version over the default.</p>
<pre><code>$ vi themes/zafta/layouts/post/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq

</code></pre><p>Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&rsquo;t.</p>
<h3 id="dont-repeat-yourself">Don&rsquo;t Repeat Yourself</h3>
<p>DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&rsquo;re figuring that out, accept that you&rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&rsquo;s okay to delay splitting up a template.</p>
]]></content>
		</item>
		
		<item>
			<title>(Hu)go Template Primer</title>
			<link>http://stc214.github.io/posts/goisforlovers/</link>
			<pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/goisforlovers/</guid>
			<description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
			<content type="html"><![CDATA[<p>Hugo uses the excellent <a href="https://golang.org/">Go</a> <a href="https://golang.org/pkg/html/template/">html/template</a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.</p>
<p>This document is a brief primer on using Go templates. The <a href="https://golang.org/pkg/html/template/">Go docs</a>
provide more details.</p>
<h2 id="introduction-to-go-templates">Introduction to Go Templates</h2>
<p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.</p>
<p>A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the <a href="https://golang.org/pkg/html/template/">Go docs</a>.</p>
<h2 id="basic-syntax">Basic Syntax</h2>
<p>Golang templates are HTML files with the addition of variables and
functions.</p>
<p><strong>Go variables and functions are accessible within {{ }}</strong></p>
<p>Accessing a predefined variable &ldquo;foo&rdquo;:</p>
<pre><code>{{ foo }}
</code></pre>
<p><strong>Parameters are separated using spaces</strong></p>
<p>Calling the add function with input of 1, 2:</p>
<pre><code>{{ add 1 2 }}
</code></pre>
<p><strong>Methods and fields are accessed via dot notation</strong></p>
<p>Accessing the Page Parameter &ldquo;bar&rdquo;</p>
<pre><code>{{ .Params.bar }}
</code></pre>
<p><strong>Parentheses can be used to group items together</strong></p>
<pre><code>{{ if or (isset .Params &quot;alt&quot;) (isset .Params &quot;caption&quot;) }} Caption {{ end }}
</code></pre>
<h2 id="variables">Variables</h2>
<p>Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
<a href="/layout/variables">variables</a> page.</p>
<p>A variable is accessed by referencing the variable name.</p>
<pre><code>&lt;title&gt;{{ .Title }}&lt;/title&gt;
</code></pre>
<p>Variables can also be defined and referenced.</p>
<pre><code>{{ $address := &quot;123 Main St.&quot;}}
{{ $address }}
</code></pre>
<h2 id="functions">Functions</h2>
<p>Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. <a href="/layout/functions">Hugo template
functions</a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ add 1 2 }}
</code></pre>
<h2 id="includes">Includes</h2>
<p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ template &quot;chrome/header.html&quot; . }}
</code></pre>
<h2 id="logic">Logic</h2>
<p>Go templates provide the most basic iteration and conditional logic.</p>
<h3 id="iteration">Iteration</h3>
<p>Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.</p>
<p><strong>Example 1: Using Context</strong></p>
<pre><code>{{ range array }}
    {{ . }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring value variable name</strong></p>
<pre><code>{{range $element := array}}
    {{ $element }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring key and value variable name</strong></p>
<pre><code>{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
</code></pre>
<h3 id="conditionals">Conditionals</h3>
<p>If, else, with, or, &amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with <code>end</code>.</p>
<p>Go Templates treat the following values as false:</p>
<ul>
<li>false</li>
<li>0</li>
<li>any array, slice, map, or string of length zero</li>
</ul>
<p><strong>Example 1: If</strong></p>
<pre><code>{{ if isset .Params &quot;title&quot; }}&lt;h4&gt;{{ index .Params &quot;title&quot; }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 2: If -&gt; Else</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{else}}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<p><strong>Example 3: And &amp; Or</strong></p>
<pre><code>{{ if and (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
</code></pre>
<p><strong>Example 4: With</strong></p>
<p>An alternative way of writing &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent.</p>
<p>The first example above could be simplified as:</p>
<pre><code>{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 5: If -&gt; Else If</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{ else if isset .Params &quot;caption&quot; }}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<h2 id="pipes">Pipes</h2>
<p>One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&rsquo;s output becomes the
input of the following pipe.</p>
<p>Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.</p>
<p>A few simple examples should help convey how to use the pipe.</p>
<p><strong>Example 1 :</strong></p>
<pre><code>{{ if eq 1 1 }} Same {{ end }}
</code></pre>
<p>is the same as</p>
<pre><code>{{ eq 1 1 | if }} Same {{ end }}
</code></pre>
<p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.</p>
<p><strong>Example 2 :</strong></p>
<pre><code>{{ index .Params &quot;disqus_url&quot; | html }}
</code></pre>
<p>Access the page parameter called &ldquo;disqus_url&rdquo; and escape the HTML.</p>
<p><strong>Example 3 :</strong></p>
<pre><code>{{ if or (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
Stuff Here
{{ end }}
</code></pre>
<p>Could be rewritten as</p>
<pre><code>{{  isset .Params &quot;caption&quot; | or isset .Params &quot;title&quot; | or isset .Params &quot;attr&quot; | if }}
Stuff Here
{{ end }}
</code></pre>
<h2 id="context-aka-the-dot">Context (aka. the dot)</h2>
<p>The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.</p>
<p><strong>Example:</strong></p>
<pre><code>  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &lt;li&gt; &lt;a href=&quot;{{ $baseurl }}/tags/{{ . | urlize }}&quot;&gt;{{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;
  {{ end }}
</code></pre>
<p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.</p>
<h1 id="hugo-parameters">Hugo Parameters</h1>
<p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.</p>
<h2 id="using-content-page-parameters">Using Content (page) Parameters</h2>
<p>In each piece of content you can provide variables to be used by the
templates. This happens in the <a href="/content/front-matter">front matter</a>.</p>
<p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&rsquo;t make a lot of sense. We&rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.</p>
<p>Here is the example front matter:</p>
<pre><code>---
title: &quot;Permalinks&quot;
date: &quot;2013-11-18&quot;
aliases:
  - &quot;/doc/permalinks/&quot;
groups: [&quot;extras&quot;]
groups_weight: 30
notoc: true
---
</code></pre><p>Here is the corresponding code inside of the template:</p>
<pre><code>  {{ if not .Params.notoc }}
    &lt;div id=&quot;toc&quot; class=&quot;well col-md-4 col-sm-6&quot;&gt;
    {{ .TableOfContents }}
    &lt;/div&gt;
  {{ end }}
</code></pre>
<h2 id="using-site-config-parameters">Using Site (config) Parameters</h2>
<p>In your top-level configuration file (eg, <code>config.yaml</code>) you can define site
parameters, which are values which will be available to you in chrome.</p>
<p>For instance, you might declare:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">params</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">CopyrightHTML</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;</span><span class="w">
</span><span class="w">  </span><span class="k">TwitterUser</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;spf13&#34;</span><span class="w">
</span><span class="w">  </span><span class="k">SidebarRecentLimit</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></code></pre></div><p>Within a footer layout, you might then declare a <code>&lt;footer&gt;</code> which is only
provided if the <code>CopyrightHTML</code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.</p>
<pre><code>{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;
&lt;div class=&quot;text-center&quot;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;
&lt;/footer&gt;{{end}}
</code></pre><p>An alternative way of writing the &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent:</p>
<pre><code>{{with .Site.Params.TwitterUser}}&lt;span class=&quot;twitter&quot;&gt;
&lt;a href=&quot;https://twitter.com/{{.}}&quot; rel=&quot;author&quot;&gt;
&lt;img src=&quot;/images/twitter.png&quot; width=&quot;48&quot; height=&quot;48&quot; title=&quot;Twitter: {{.}}&quot;
 alt=&quot;Twitter&quot;&gt;&lt;/a&gt;
&lt;/span&gt;{{end}}
</code></pre><p>Finally, if you want to pull &ldquo;magic constants&rdquo; out of your layouts, you can do
so, such as in this example:</p>
<pre><code>&lt;nav class=&quot;recent&quot;&gt;
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &lt;li&gt;&lt;a href=&quot;{{.RelPermalink}}&quot;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;
  {{end}}&lt;/ul&gt;
&lt;/nav&gt;
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Getting Started with Hugo</title>
			<link>http://stc214.github.io/posts/hugoisforlovers/</link>
			<pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/hugoisforlovers/</guid>
			<description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
			<content type="html"><![CDATA[<h2 id="step-1-install-hugo">Step 1. Install Hugo</h2>
<p>Go to <a href="https://github.com/spf13/hugo/releases">Hugo releases</a> and download the
appropriate version for your OS and architecture.</p>
<p>Save it somewhere specific as we will be using it in the next step.</p>
<p>More complete instructions are available at <a href="https://gohugo.io/getting-started/installing/">Install Hugo</a></p>
<h2 id="step-2-build-the-docs">Step 2. Build the Docs</h2>
<p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.</p>
<p>Follow the following steps:</p>
<ol>
<li>Clone the <a href="http://github.com/spf13/hugo">Hugo repository</a></li>
<li>Go into the repo</li>
<li>Run hugo in server mode and build the docs</li>
<li>Open your browser to http://localhost:1313</li>
</ol>
<p>Corresponding pseudo commands:</p>
<pre><code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Press ctrl+c to stop
</code></pre>
<p>Once you&rsquo;ve gotten here, follow along the rest of this page on your local build.</p>
<h2 id="step-3-change-the-docs-site">Step 3. Change the docs site</h2>
<p>Stop the Hugo process by hitting Ctrl+C.</p>
<p>Now we are going to run hugo again, but this time with hugo in watch mode.</p>
<pre><code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&gt; Press ctrl+c to stop
</code></pre>
<p>Open your <a href="http://vim.spf13.com">favorite editor</a> and change one of the source
content pages. How about changing this very file to <em>fix the typo</em>. How about changing this very file to <em>fix the typo</em>.</p>
<p>Content files are found in <code>docs/content/</code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
<code>docs/content/overview/quickstart.md</code>.</p>
<p>Change and save this file.. Notice what happened in your terminal.</p>
<pre><code>&gt; Change detected, rebuilding site

&gt; 29 pages created
&gt; 0 tags index created
&gt; in 26 ms
</code></pre>
<p>Refresh the browser and observe that the typo is now fixed.</p>
<p>Notice how quick that was. Try to refresh the site before it&rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.</p>
<h2 id="step-4-have-fun">Step 4. Have fun</h2>
<p>The best way to learn something is to play with it.</p>
]]></content>
		</item>
		
		<item>
			<title>Migrate to Hugo from Jekyll</title>
			<link>http://stc214.github.io/posts/migrate-from-jekyll/</link>
			<pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/migrate-from-jekyll/</guid>
			<description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
			<content type="html"><![CDATA[<h2 id="move-static-content-to-static">Move static content to <code>static</code></h2>
<p>Jekyll has a rule that any directory not starting with <code>_</code> will be copied as-is to the <code>_site</code> output. Hugo keeps all static content under <code>static</code>. You should therefore move it all there.
With Jekyll, something that looked like</p>
<pre><code>▾ &lt;root&gt;/
    ▾ images/
        logo.png
</code></pre>
<p>should become</p>
<pre><code>▾ &lt;root&gt;/
    ▾ static/
        ▾ images/
            logo.png
</code></pre>
<p>Additionally, you&rsquo;ll want any files that should reside at the root (such as <code>CNAME</code>) to be moved to <code>static</code>.</p>
<h2 id="create-your-hugo-configuration-file">Create your Hugo configuration file</h2>
<p>Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the <a href="/overview/configuration/">Hugo configuration documentation</a> for details.</p>
<h2 id="set-your-configuration-publish-folder-to-_site">Set your configuration publish folder to <code>_site</code></h2>
<p>The default is for Jekyll to publish to <code>_site</code> and for Hugo to publish to <code>public</code>. If, like me, you have <a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html"><code>_site</code> mapped to a git submodule on the <code>gh-pages</code> branch</a>, you&rsquo;ll want to do one of two alternatives:</p>
<ol>
<li>
<p>Change your submodule to point to map <code>gh-pages</code> to public instead of <code>_site</code> (recommended).</p>
<pre><code> git submodule deinit _site
 git rm _site
 git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
</code></pre>
</li>
<li>
<p>Or, change the Hugo configuration to use <code>_site</code> instead of <code>public</code>.</p>
<pre><code> {
     ..
     &quot;publishdir&quot;: &quot;_site&quot;,
     ..
 }
</code></pre>
</li>
</ol>
<h2 id="convert-jekyll-templates-to-hugo-templates">Convert Jekyll templates to Hugo templates</h2>
<p>That&rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to <a href="http://jekyllrb.com/docs/templates/">Jekyll&rsquo;s template documentation</a> if you need to refresh your memory on how you built your blog and <a href="/layout/templates/">Hugo&rsquo;s template</a> to learn Hugo&rsquo;s way.</p>
<p>As a single reference data point, converting my templates for <a href="http://heyitsalex.net/">heyitsalex.net</a> took me no more than a few hours.</p>
<h2 id="convert-jekyll-plugins-to-hugo-shortcodes">Convert Jekyll plugins to Hugo shortcodes</h2>
<p>Jekyll has <a href="http://jekyllrb.com/docs/plugins/">plugins</a>; Hugo has <a href="/doc/shortcodes/">shortcodes</a>. It&rsquo;s fairly trivial to do a port.</p>
<h3 id="implementation">Implementation</h3>
<p>As an example, I was using a custom <a href="https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb"><code>image_tag</code></a> plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.</p>
<p>Jekyll&rsquo;s plugin:</p>
<pre><code>module Jekyll
  class ImageTag &lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;(\s+)-&gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &quot;&lt;figure class='#{@class}'&gt;&quot;
      else
        source = &quot;&lt;figure&gt;&quot;
      end
      if @link
        source += &quot;&lt;a href=\&quot;#{@link}\&quot;&gt;&quot;
      end
      source += &quot;&lt;img src=\&quot;#{@url}\&quot;&gt;&quot;
      if @link
        source += &quot;&lt;/a&gt;&quot;
      end
      source += &quot;&lt;figcaption&gt;#{@caption}&lt;/figcaption&gt;&quot; if @caption
      source += &quot;&lt;/figure&gt;&quot;
      source
    end
  end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
</code></pre>
<p>is written as this Hugo shortcode:</p>
<pre><code>&lt;!-- image --&gt;
&lt;figure {{ with .Get &quot;class&quot; }}class=&quot;{{.}}&quot;{{ end }}&gt;
    {{ with .Get &quot;link&quot;}}&lt;a href=&quot;{{.}}&quot;&gt;{{ end }}
        &lt;img src=&quot;{{ .Get &quot;src&quot; }}&quot; {{ if or (.Get &quot;alt&quot;) (.Get &quot;caption&quot;) }}alt=&quot;{{ with .Get &quot;alt&quot;}}{{.}}{{else}}{{ .Get &quot;caption&quot; }}{{ end }}&quot;{{ end }} /&gt;
    {{ if .Get &quot;link&quot;}}&lt;/a&gt;{{ end }}
    {{ if or (or (.Get &quot;title&quot;) (.Get &quot;caption&quot;)) (.Get &quot;attr&quot;)}}
    &lt;figcaption&gt;{{ if isset .Params &quot;title&quot; }}
        {{ .Get &quot;title&quot; }}{{ end }}
        {{ if or (.Get &quot;caption&quot;) (.Get &quot;attr&quot;)}}&lt;p&gt;
        {{ .Get &quot;caption&quot; }}
        {{ with .Get &quot;attrlink&quot;}}&lt;a href=&quot;{{.}}&quot;&gt; {{ end }}
            {{ .Get &quot;attr&quot; }}
        {{ if .Get &quot;attrlink&quot;}}&lt;/a&gt; {{ end }}
        &lt;/p&gt; {{ end }}
    &lt;/figcaption&gt;
    {{ end }}
&lt;/figure&gt;
&lt;!-- image --&gt;
</code></pre>
<h3 id="usage">Usage</h3>
<p>I simply changed:</p>
<pre><code>{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &quot;having fun&quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&quot; -&gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
</code></pre>
<p>to this (this example uses a slightly extended version named <code>fig</code>, different than the built-in <code>figure</code>):</p>
<pre><code>{{% fig class=&quot;full&quot; src=&quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&quot; title=&quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&quot; link=&quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&quot; %}}
</code></pre>
<p>As a bonus, the shortcode named parameters are, arguably, more readable.</p>
<h2 id="finishing-touches">Finishing touches</h2>
<h3 id="fix-content">Fix content</h3>
<p>Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that <code>hugo server --watch</code> is your friend. Test your changes and fix errors as needed.</p>
<h3 id="clean-up">Clean up</h3>
<p>You&rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&rsquo;t used, delete it.</p>
<h2 id="a-practical-example-in-a-diff">A practical example in a diff</h2>
<p><a href="http://heyitsalex.net/">Hey, it&rsquo;s Alex</a> was migrated in less than a <em>father-with-kids day</em> from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this <a href="https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610">diff</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Docker管理面板系列——Portainer(简单、美观、强大)</title>
			<link>http://stc214.github.io/posts/2020_06_30_14_57_42/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/2020_06_30_14_57_42/</guid>
			<description>原文：http://www.senra.me/docker-management-panel-series-portainer/
一.介绍
Portainer是个轻量级的Docker管理面板，和Rancher这种重量级选手没法比，Portainer倾向于单机的管理(后来发现能够添加多个单机节点切换着管理)，当然，在Docker搞出Swarm之后Portainer也借此实现了集群管理。
使用官方提供的Demo预览一下
地址: http://demo.portainer.io/ 用户名: admin 密码: tryportainer
你会有一种眼前一亮的感觉，美观，而且功能全面(从边上这一长列就能感受出来)
虽然选项很多，但是其实就是命令行操作的简化，如果你用过Docker的命令行操作你能很快熟悉Portainer，和Rancher那种多了很多新花样不一样，Rancher的很多东西你看上去是摸不着头脑的，必须看着文档试一下才能大概弄清楚这是个啥。
二.安装
是不是眼馋了？那么就让我们装一下玩玩吧。
这是Portainer对Docker各版本的支持情况
Portainer的安装方式主要有两种，一个是使用Docker安装，一个是二进制文件直接跑，我建议用Docker安装，比较方便点，也不用你自己去配置自启动啥的。 其他的请参考官方文档 ——&amp;gt; 传送门
首先，我们得先把Unix套接字或者TCP监听打开，来方便连接(不过似乎Unix套接字默认是启用的，TCP需要自己开)
PS.这儿请务必注意，不能直接配0.0.0.0，因为如果不做ACL或者TLS认证会导致你的Docker被人扫到后直接控制，有可能被远程创建挖矿容器
先确认你的机器中是否存在/etc/sysconfig/docker这个配置文件，如果存在的话请修改，在其中的配置选项中加入如下内容 #这个仅允许本地连接，如果要远程的话改成0.0.0.0，但是如果是公网中远程请你自己配TLS认证或者防火墙加白名单
-Htcp://127.0.0.1:2375 -H unix:///var/run/docker.sock 但是，很多情况下我们会不存在这个文件(较高版本的Docker不会自动创建这个)，所以我们可以选择另外一种方法，参照Docker文档——&amp;gt;传送门
vi /etc/docker/daemon.json #添加如下，这个仅允许本地连接，如果要远程的话改成0.0.0.0，如果添加的不在最后一行请在末尾加上逗号
&amp;quot;hosts&amp;quot;: [&amp;quot;tcp://127.0.0.1:2375&amp;quot;, &amp;quot;unix:///var/run/docker.sock&amp;quot;] #如果deamon.json不存在请添加完整的json格式
{ &amp;#34;hosts&amp;#34;: [&amp;#34;tcp://127.0.0.1:2375&amp;#34;, &amp;#34;unix:///var/run/docker.sock&amp;#34;] } vi /etc/docker/daemon.json #添加如下，这个仅允许本地连接，如果要远程的话改成0.0.0.0，如果添加的不在最后一行请在末尾加上逗号
&amp;#34;hosts&amp;#34;: [&amp;#34;tcp://127.0.0.1:2375&amp;#34;, &amp;#34;unix:///var/run/docker.sock&amp;#34;] #如果deamon.json不存在请添加完整的json格式
{ &amp;#34;hosts&amp;#34;: [&amp;#34;tcp://127.0.0.1:2375&amp;#34;, &amp;#34;unix:///var/run/docker.sock&amp;#34;] } 虽然其实你修改启动脚本在dockerd命令之后添加 -H unix:///var/run/docker.sock -H tcp://127.0.0.1 也可以，但是这样终归不怎么优雅。
准备工作做完，然后开始安装，使用Docker安装有三种连接方式
首先是全部都需要做的操作，添加一个数据卷，当然你也可以在docker run的时候手动指定数据挂载路径，效果是一样的，将下面docker run命令中的portainer_data换成宿主机上的具体路径就OK
docker volume create portainer_data  使用Unix套接字连接单个Docker(本地)  docker run -d -p 9000:9000 -v /var/run/docker.</description>
			<content type="html"><![CDATA[<p>原文：http://www.senra.me/docker-management-panel-series-portainer/</p>
<p>一.介绍</p>
<p>Portainer是个轻量级的Docker管理面板，和Rancher这种重量级选手没法比，Portainer倾向于单机的管理(后来发现能够添加多个单机节点切换着管理)，当然，在Docker搞出Swarm之后Portainer也借此实现了集群管理。</p>
<p>使用官方提供的Demo预览一下</p>
<p>地址: <a href="http://demo.portainer.io/">http://demo.portainer.io/</a>
用户名: admin
密码: tryportainer</p>
<p>你会有一种眼前一亮的感觉，美观，而且功能全面(从边上这一长列就能感受出来)</p>
<p>虽然选项很多，但是其实就是命令行操作的简化，如果你用过Docker的命令行操作你能很快熟悉Portainer，和Rancher那种多了很多新花样不一样，Rancher的很多东西你看上去是摸不着头脑的，必须看着文档试一下才能大概弄清楚这是个啥。</p>
<p>二.安装</p>
<p>是不是眼馋了？那么就让我们装一下玩玩吧。</p>
<p>这是Portainer对Docker各版本的支持情况</p>
<p>Portainer的安装方式主要有两种，一个是使用Docker安装，一个是二进制文件直接跑，我建议用Docker安装，比较方便点，也不用你自己去配置自启动啥的。
其他的请参考官方文档 ——&gt; 传送门</p>
<p>首先，我们得先把Unix套接字或者TCP监听打开，来方便连接(不过似乎Unix套接字默认是启用的，TCP需要自己开)</p>
<p>PS.这儿请务必注意，不能直接配0.0.0.0，因为如果不做ACL或者TLS认证会导致你的Docker被人扫到后直接控制，有可能被远程创建挖矿容器</p>
<p>先确认你的机器中是否存在/etc/sysconfig/docker这个配置文件，如果存在的话请修改，在其中的配置选项中加入如下内容
#这个仅允许本地连接，如果要远程的话改成0.0.0.0，但是如果是公网中远程请你自己配TLS认证或者防火墙加白名单</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">-Htcp://127.0.0.1:2375 -H unix:///var/run/docker.sock
</code></pre></div><p>但是，很多情况下我们会不存在这个文件(较高版本的Docker不会自动创建这个)，所以我们可以选择另外一种方法，参照Docker文档——&gt;传送门</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">vi /etc/docker/daemon.json
</code></pre></div><p>#添加如下，这个仅允许本地连接，如果要远程的话改成0.0.0.0，如果添加的不在最后一行请在末尾加上逗号</p>
<pre><code>&quot;hosts&quot;: [&quot;tcp://127.0.0.1:2375&quot;, &quot;unix:///var/run/docker.sock&quot;]
</code></pre><p>#如果deamon.json不存在请添加完整的json格式</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
 <span class="nt">&#34;hosts&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;tcp://127.0.0.1:2375&#34;</span><span class="p">,</span> <span class="s2">&#34;unix:///var/run/docker.sock&#34;</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">vi /etc/docker/daemon.json
</code></pre></div><p>#添加如下，这个仅允许本地连接，如果要远程的话改成0.0.0.0，如果添加的不在最后一行请在末尾加上逗号</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="s2">&#34;hosts&#34;</span>: <span class="o">[</span><span class="s2">&#34;tcp://127.0.0.1:2375&#34;</span>, <span class="s2">&#34;unix:///var/run/docker.sock&#34;</span><span class="o">]</span>
</code></pre></div><p>#如果deamon.json不存在请添加完整的json格式</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
 <span class="nt">&#34;hosts&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;tcp://127.0.0.1:2375&#34;</span><span class="p">,</span> <span class="s2">&#34;unix:///var/run/docker.sock&#34;</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div><p>虽然其实你修改启动脚本在dockerd命令之后添加 -H unix:///var/run/docker.sock -H tcp://127.0.0.1 也可以，但是这样终归不怎么优雅。</p>
<p>准备工作做完，然后开始安装，使用Docker安装有三种连接方式</p>
<p>首先是全部都需要做的操作，添加一个数据卷，当然你也可以在docker run的时候手动指定数据挂载路径，效果是一样的，将下面docker run命令中的portainer_data换成宿主机上的具体路径就OK</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker volume create portainer_data
</code></pre></div><ol>
<li>使用Unix套接字连接单个Docker(本地)</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">	docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
	   
	   
	docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
	<span class="sb">```</span>
	
	
2. 使用TCP方式连接单个Docker<span class="o">(</span>本地或远程<span class="o">)</span>
<span class="c1">#如果连接的是远程的docker，请把ip换掉(如果你改了dockerd监听的默认端口也记得修改2375)</span>

<span class="sb">```</span>shell
docker run -d -p 9000:9000 portainer/portainer -H tcp://127.0.0.1:2375
	<span class="sb">```</span>
	
	

<span class="c1">#如果连接的是远程的docker，请把ip换掉(如果你改了dockerd监听的默认端口也记得修改2375)</span>

<span class="sb">```</span>shell
docker run -d -p 9000:9000 portainer/portainer -H tcp://127.0.0.1:2375
</code></pre></div><ol start="3">
<li>使用Unix套接字或TCP连接Swarm集群(本地或远程)</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">	docker run -d -p 9000:9000 portainer/portainer -H tcp://SWARM集群管理IP:2375
	
	docker run -d -p 9000:9000 portainer/portainer -H tcp://SWARM集群管理IP:2375
	<span class="sb">```</span>
	
	



下面这个算是另外一种了，是将Portainer以服务的形式部署在集群中，似乎也可以借助Swarm来实现HA?

<span class="sb">```</span>shell
docker service create <span class="se">\
</span><span class="se"></span>--name portainer <span class="se">\
</span><span class="se"></span>--publish 9000:9000 <span class="se">\
</span><span class="se"></span>--replicas<span class="o">=</span><span class="m">1</span> <span class="se">\
</span><span class="se"></span>--constraint <span class="s1">&#39;node.role == manager&#39;</span> <span class="se">\
</span><span class="se"></span>--mount <span class="nv">type</span><span class="o">=</span>bind,src<span class="o">=</span>//var/run/docker.sock,dst<span class="o">=</span>/var/run/docker.sock <span class="se">\
</span><span class="se"></span>--mount <span class="nv">type</span><span class="o">=</span>bind,src<span class="o">=</span>//opt/portainer,dst<span class="o">=</span>/data <span class="se">\
</span><span class="se"></span>portainer/portainer <span class="se">\
</span><span class="se"></span>-H unix:///var/run/docker.sock
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker service create <span class="se">\
</span><span class="se"></span>--name portainer <span class="se">\
</span><span class="se"></span>--publish 9000:9000 <span class="se">\
</span><span class="se"></span>--replicas<span class="o">=</span><span class="m">1</span> <span class="se">\
</span><span class="se"></span>--constraint <span class="s1">&#39;node.role == manager&#39;</span> <span class="se">\
</span><span class="se"></span>--mount <span class="nv">type</span><span class="o">=</span>bind,src<span class="o">=</span>//var/run/docker.sock,dst<span class="o">=</span>/var/run/docker.sock <span class="se">\
</span><span class="se"></span>--mount <span class="nv">type</span><span class="o">=</span>bind,src<span class="o">=</span>//opt/portainer,dst<span class="o">=</span>/data <span class="se">\
</span><span class="se"></span>portainer/portainer <span class="se">\
</span><span class="se"></span>-H unix:///var/run/docker.sock
</code></pre></div><p>第一次访问会让你创建账号</p>
<p>然后选择连接的是本地还是远端的Docker</p>
<p>全部设置完后我们就能进去了，新建容器的操作也很友好</p>
<p>感觉还是挺棒的，至于Swarm的我就不说啥了，之后估计还有专门讲Swarm基本使用的文章，可以关注下。</p>
]]></content>
		</item>
		
		<item>
			<title>Win10 2004版 win terminal 下载和配色</title>
			<link>http://stc214.github.io/posts/2020_06_30_14_56_01/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/2020_06_30_14_56_01/</guid>
			<description>下载 本步骤可能需要梯子
打开任务栏搜索图标
搜索store 打开
搜索terminal
下载安装即可
简单配置 打开win terminal
点窗口标题栏的 +
点设置打开配置文件
对应词条修改成如下样式 &amp;ldquo;copyOnSelect&amp;rdquo;: true,
其他选项根据需求配置
更改配色 打开 https://atomcorp.github.io/themes/
预览和选择需要的配色
对于满意的主题配色点copy theme
加入配置文件的
schemes词条中
如：
&amp;#34;schemes&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Chester&amp;#34;, &amp;#34;black&amp;#34;: &amp;#34;#080200&amp;#34;, &amp;#34;red&amp;#34;: &amp;#34;#fa5e5b&amp;#34;, &amp;#34;green&amp;#34;: &amp;#34;#16c98d&amp;#34;, &amp;#34;yellow&amp;#34;: &amp;#34;#ffc83f&amp;#34;, &amp;#34;blue&amp;#34;: &amp;#34;#288ad6&amp;#34;, &amp;#34;purple&amp;#34;: &amp;#34;#d34590&amp;#34;, &amp;#34;cyan&amp;#34;: &amp;#34;#28ddde&amp;#34;, &amp;#34;white&amp;#34;: &amp;#34;#e7e7e7&amp;#34;, &amp;#34;brightBlack&amp;#34;: &amp;#34;#6f6b68&amp;#34;, &amp;#34;brightRed&amp;#34;: &amp;#34;#fa5e5b&amp;#34;, &amp;#34;brightGreen&amp;#34;: &amp;#34;#16c98d&amp;#34;, &amp;#34;brightYellow&amp;#34;: &amp;#34;#feef6d&amp;#34;, &amp;#34;brightBlue&amp;#34;: &amp;#34;#278ad6&amp;#34;, &amp;#34;brightPurple&amp;#34;: &amp;#34;#d34590&amp;#34;, &amp;#34;brightCyan&amp;#34;: &amp;#34;#27dede&amp;#34;, &amp;#34;brightWhite&amp;#34;: &amp;#34;#ffffff&amp;#34;, &amp;#34;background&amp;#34;: &amp;#34;#2c3643&amp;#34;, &amp;#34;foreground&amp;#34;: &amp;#34;#ffffff&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;Hipster Green&amp;#34;, &amp;#34;black&amp;#34;: &amp;#34;#000000&amp;#34;, &amp;#34;red&amp;#34;: &amp;#34;#b6214a&amp;#34;, &amp;#34;green&amp;#34;: &amp;#34;#00a600&amp;#34;, &amp;#34;yellow&amp;#34;: &amp;#34;#bfbf00&amp;#34;, &amp;#34;blue&amp;#34;: &amp;#34;#246eb2&amp;#34;, &amp;#34;purple&amp;#34;: &amp;#34;#b200b2&amp;#34;, &amp;#34;cyan&amp;#34;: &amp;#34;#00a6b2&amp;#34;, &amp;#34;white&amp;#34;: &amp;#34;#bfbfbf&amp;#34;, &amp;#34;brightBlack&amp;#34;: &amp;#34;#666666&amp;#34;, &amp;#34;brightRed&amp;#34;: &amp;#34;#e50000&amp;#34;, &amp;#34;brightGreen&amp;#34;: &amp;#34;#86a93e&amp;#34;, &amp;#34;brightYellow&amp;#34;: &amp;#34;#e5e500&amp;#34;, &amp;#34;brightBlue&amp;#34;: &amp;#34;#0000ff&amp;#34;, &amp;#34;brightPurple&amp;#34;: &amp;#34;#e500e5&amp;#34;, &amp;#34;brightCyan&amp;#34;: &amp;#34;#00e5e5&amp;#34;, &amp;#34;brightWhite&amp;#34;: &amp;#34;#e5e5e5&amp;#34;, &amp;#34;background&amp;#34;: &amp;#34;#100b05&amp;#34;, &amp;#34;foreground&amp;#34;: &amp;#34;#84c138&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;Monokai Soda&amp;#34;, &amp;#34;black&amp;#34;: &amp;#34;#1a1a1a&amp;#34;, &amp;#34;red&amp;#34;: &amp;#34;#f4005f&amp;#34;, &amp;#34;green&amp;#34;: &amp;#34;#98e024&amp;#34;, &amp;#34;yellow&amp;#34;: &amp;#34;#fa8419&amp;#34;, &amp;#34;blue&amp;#34;: &amp;#34;#9d65ff&amp;#34;, &amp;#34;purple&amp;#34;: &amp;#34;#f4005f&amp;#34;, &amp;#34;cyan&amp;#34;: &amp;#34;#58d1eb&amp;#34;, &amp;#34;white&amp;#34;: &amp;#34;#c4c5b5&amp;#34;, &amp;#34;brightBlack&amp;#34;: &amp;#34;#625e4c&amp;#34;, &amp;#34;brightRed&amp;#34;: &amp;#34;#f4005f&amp;#34;, &amp;#34;brightGreen&amp;#34;: &amp;#34;#98e024&amp;#34;, &amp;#34;brightYellow&amp;#34;: &amp;#34;#e0d561&amp;#34;, &amp;#34;brightBlue&amp;#34;: &amp;#34;#9d65ff&amp;#34;, &amp;#34;brightPurple&amp;#34;: &amp;#34;#f4005f&amp;#34;, &amp;#34;brightCyan&amp;#34;: &amp;#34;#58d1eb&amp;#34;, &amp;#34;brightWhite&amp;#34;: &amp;#34;#f6f6ef&amp;#34;, &amp;#34;background&amp;#34;: &amp;#34;#1a1a1a&amp;#34;, &amp;#34;foreground&amp;#34;: &amp;#34;#c4c5b5&amp;#34; } ], 之后在如下词条中加入对应配置即可</description>
			<content type="html"><![CDATA[<h3 id="下载">下载</h3>
<p>本步骤可能需要梯子</p>
<p>打开任务栏搜索图标</p>
<p>搜索store 打开</p>
<p>搜索terminal</p>
<p>下载安装即可</p>
<h3 id="简单配置">简单配置</h3>
<p>打开win terminal</p>
<p>点窗口标题栏的 +</p>
<p>点设置打开配置文件</p>
<p>对应词条修改成如下样式
&ldquo;copyOnSelect&rdquo;: true,</p>
<p>其他选项根据需求配置</p>
<h3 id="更改配色">更改配色</h3>
<p>打开 <a href="https://atomcorp.github.io/themes/">https://atomcorp.github.io/themes/</a></p>
<p>预览和选择需要的配色</p>
<p>对于满意的主题配色点copy theme</p>
<p>加入配置文件的</p>
<p>schemes词条中</p>
<p>如：</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"> <span class="s2">&#34;schemes&#34;</span><span class="err">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Chester&#34;</span><span class="p">,</span>
            <span class="nt">&#34;black&#34;</span><span class="p">:</span> <span class="s2">&#34;#080200&#34;</span><span class="p">,</span>
            <span class="nt">&#34;red&#34;</span><span class="p">:</span> <span class="s2">&#34;#fa5e5b&#34;</span><span class="p">,</span>
            <span class="nt">&#34;green&#34;</span><span class="p">:</span> <span class="s2">&#34;#16c98d&#34;</span><span class="p">,</span>
            <span class="nt">&#34;yellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#ffc83f&#34;</span><span class="p">,</span>
            <span class="nt">&#34;blue&#34;</span><span class="p">:</span> <span class="s2">&#34;#288ad6&#34;</span><span class="p">,</span>
            <span class="nt">&#34;purple&#34;</span><span class="p">:</span> <span class="s2">&#34;#d34590&#34;</span><span class="p">,</span>
            <span class="nt">&#34;cyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#28ddde&#34;</span><span class="p">,</span>
            <span class="nt">&#34;white&#34;</span><span class="p">:</span> <span class="s2">&#34;#e7e7e7&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightBlack&#34;</span><span class="p">:</span> <span class="s2">&#34;#6f6b68&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightRed&#34;</span><span class="p">:</span> <span class="s2">&#34;#fa5e5b&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightGreen&#34;</span><span class="p">:</span> <span class="s2">&#34;#16c98d&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightYellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#feef6d&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightBlue&#34;</span><span class="p">:</span> <span class="s2">&#34;#278ad6&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightPurple&#34;</span><span class="p">:</span> <span class="s2">&#34;#d34590&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightCyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#27dede&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightWhite&#34;</span><span class="p">:</span> <span class="s2">&#34;#ffffff&#34;</span><span class="p">,</span>
            <span class="nt">&#34;background&#34;</span><span class="p">:</span> <span class="s2">&#34;#2c3643&#34;</span><span class="p">,</span>
            <span class="nt">&#34;foreground&#34;</span><span class="p">:</span> <span class="s2">&#34;#ffffff&#34;</span>
          <span class="p">},</span>
          <span class="p">{</span>
            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Hipster Green&#34;</span><span class="p">,</span>
            <span class="nt">&#34;black&#34;</span><span class="p">:</span> <span class="s2">&#34;#000000&#34;</span><span class="p">,</span>
            <span class="nt">&#34;red&#34;</span><span class="p">:</span> <span class="s2">&#34;#b6214a&#34;</span><span class="p">,</span>
            <span class="nt">&#34;green&#34;</span><span class="p">:</span> <span class="s2">&#34;#00a600&#34;</span><span class="p">,</span>
            <span class="nt">&#34;yellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#bfbf00&#34;</span><span class="p">,</span>
            <span class="nt">&#34;blue&#34;</span><span class="p">:</span> <span class="s2">&#34;#246eb2&#34;</span><span class="p">,</span>
            <span class="nt">&#34;purple&#34;</span><span class="p">:</span> <span class="s2">&#34;#b200b2&#34;</span><span class="p">,</span>
            <span class="nt">&#34;cyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#00a6b2&#34;</span><span class="p">,</span>
            <span class="nt">&#34;white&#34;</span><span class="p">:</span> <span class="s2">&#34;#bfbfbf&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightBlack&#34;</span><span class="p">:</span> <span class="s2">&#34;#666666&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightRed&#34;</span><span class="p">:</span> <span class="s2">&#34;#e50000&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightGreen&#34;</span><span class="p">:</span> <span class="s2">&#34;#86a93e&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightYellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#e5e500&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightBlue&#34;</span><span class="p">:</span> <span class="s2">&#34;#0000ff&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightPurple&#34;</span><span class="p">:</span> <span class="s2">&#34;#e500e5&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightCyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#00e5e5&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightWhite&#34;</span><span class="p">:</span> <span class="s2">&#34;#e5e5e5&#34;</span><span class="p">,</span>
            <span class="nt">&#34;background&#34;</span><span class="p">:</span> <span class="s2">&#34;#100b05&#34;</span><span class="p">,</span>
            <span class="nt">&#34;foreground&#34;</span><span class="p">:</span> <span class="s2">&#34;#84c138&#34;</span>
          <span class="p">},</span>
          <span class="p">{</span>
            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Monokai Soda&#34;</span><span class="p">,</span>
            <span class="nt">&#34;black&#34;</span><span class="p">:</span> <span class="s2">&#34;#1a1a1a&#34;</span><span class="p">,</span>
            <span class="nt">&#34;red&#34;</span><span class="p">:</span> <span class="s2">&#34;#f4005f&#34;</span><span class="p">,</span>
            <span class="nt">&#34;green&#34;</span><span class="p">:</span> <span class="s2">&#34;#98e024&#34;</span><span class="p">,</span>
            <span class="nt">&#34;yellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#fa8419&#34;</span><span class="p">,</span>
            <span class="nt">&#34;blue&#34;</span><span class="p">:</span> <span class="s2">&#34;#9d65ff&#34;</span><span class="p">,</span>
            <span class="nt">&#34;purple&#34;</span><span class="p">:</span> <span class="s2">&#34;#f4005f&#34;</span><span class="p">,</span>
            <span class="nt">&#34;cyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#58d1eb&#34;</span><span class="p">,</span>
            <span class="nt">&#34;white&#34;</span><span class="p">:</span> <span class="s2">&#34;#c4c5b5&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightBlack&#34;</span><span class="p">:</span> <span class="s2">&#34;#625e4c&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightRed&#34;</span><span class="p">:</span> <span class="s2">&#34;#f4005f&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightGreen&#34;</span><span class="p">:</span> <span class="s2">&#34;#98e024&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightYellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#e0d561&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightBlue&#34;</span><span class="p">:</span> <span class="s2">&#34;#9d65ff&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightPurple&#34;</span><span class="p">:</span> <span class="s2">&#34;#f4005f&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightCyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#58d1eb&#34;</span><span class="p">,</span>
            <span class="nt">&#34;brightWhite&#34;</span><span class="p">:</span> <span class="s2">&#34;#f6f6ef&#34;</span><span class="p">,</span>
            <span class="nt">&#34;background&#34;</span><span class="p">:</span> <span class="s2">&#34;#1a1a1a&#34;</span><span class="p">,</span>
            <span class="nt">&#34;foreground&#34;</span><span class="p">:</span> <span class="s2">&#34;#c4c5b5&#34;</span>
          <span class="p">}</span>

    <span class="p">]</span><span class="err">,</span>

</code></pre></div><p>之后在如下词条中加入对应配置即可</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">  <span class="s2">&#34;profiles&#34;</span><span class="err">:</span>
    <span class="p">{</span>
        <span class="nt">&#34;defaults&#34;</span><span class="p">:</span>
        <span class="p">{</span>
            <span class="nt">&#34;colorScheme&#34;</span> <span class="p">:</span> <span class="s2">&#34;Chester&#34;</span><span class="p">,</span>

            <span class="nt">&#34;userAcrylic&#34;</span> <span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            
            <span class="nt">&#34;acrylicOpacity&#34;</span> <span class="p">:</span>  <span class="mf">0.75</span>
            
            
            
            <span class="err">//</span> <span class="err">Put</span> <span class="err">settings</span> <span class="err">here</span> <span class="err">that</span> <span class="err">you</span> <span class="err">want</span> <span class="err">to</span> <span class="err">apply</span> <span class="err">to</span> <span class="err">all</span> <span class="err">profiles.</span>
        <span class="p">},</span>
</code></pre></div><p>未完待续</p>
]]></content>
		</item>
		
		<item>
			<title>Win10下用Hugo把博客搭建到gitpages上(旧版)</title>
			<link>http://stc214.github.io/posts/2020_06_30_02_41_35/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/2020_06_30_02_41_35/</guid>
			<description>环境准备 1. hugo环境 https://github.com/gohugoio/hugo/releases 如上地址下载对系统所需要的二进制文件 当然如果系统部署了包管理环境的话则可以直接使用工具安装 2. 配置系统环境变量（win） 将hugo.exe的路径放入系统环境变量的path中 重新打开终端  站点创建操作 1. 定位目录 在终端中切换到需要生成站点的目录 2. 创建初始站点 hugo new site sitename 切换到sitename目录即可进行下一步操作
3. 选择主题文件并应用样式  https://themes.gohugo.io/ 在官方主题站拉取主题到对应主题目录 复制主题exampleSite目录内的所有内容并覆盖到根目录 打开根目录的config.toml并根据需求修改内容即可 修改完毕后在根目录使用
hugo server 即可预览效果
 4.部署到github  1.根目录
&amp;gt; hugo &amp;gt; ``` &amp;gt; 即可生成需要推送到git的项目静态文件于public目录中 &amp;gt; 2.切换到public目录 &amp;gt; 在git已经配置好的情况下 &amp;gt; 打开github并创建新仓库 &amp;gt; 仓库名必须为： [当前用户名].github.io &amp;gt; ```bash &amp;gt; git init &amp;gt; git remote add origin [仓库地址].git &amp;gt; git add . &amp;gt; git commit -m &amp;#39;#&amp;#39; &amp;gt; git push -u origin master &amp;gt; ``` 之后即可访问https://[当前用户名].</description>
			<content type="html"><![CDATA[<h2 id="环境准备">环境准备</h2>
<h3 id="1-hugo环境">1. hugo环境</h3>
<pre><code>https://github.com/gohugoio/hugo/releases  
如上地址下载对系统所需要的二进制文件  
当然如果系统部署了包管理环境的话则可以直接使用工具安装
</code></pre><h3 id="2-配置系统环境变量win">2. 配置系统环境变量（win）</h3>
<pre><code>将hugo.exe的路径放入系统环境变量的path中  
重新打开终端
</code></pre><hr>
<h2 id="站点创建操作">站点创建操作</h2>
<h3 id="1-定位目录">1. 定位目录</h3>
<pre><code>在终端中切换到需要生成站点的目录
</code></pre><h3 id="2-创建初始站点">2. 创建初始站点</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo new site sitename
</code></pre></div><p>切换到sitename目录即可进行下一步操作</p>
<h3 id="3-选择主题文件并应用样式">3. 选择主题文件并应用样式</h3>
<blockquote>
<p><a href="https://themes.gohugo.io/">https://themes.gohugo.io/</a>
在官方主题站拉取主题到对应主题目录
复制主题exampleSite目录内的所有内容并覆盖到根目录
打开根目录的config.toml并根据需求修改内容即可 修改完毕后在根目录使用</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo server
</code></pre></div><p>即可预览效果</p>
</blockquote>
<h3 id="4部署到github">4.部署到github</h3>
<blockquote>
<p>1.根目录</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">&gt; hugo
&gt; <span class="sb">```</span>
&gt; 即可生成需要推送到git的项目静态文件于public目录中  

&gt; 2.切换到public目录  
&gt; 在git已经配置好的情况下  
&gt; 打开github并创建新仓库  
&gt; 仓库名必须为： <span class="o">[</span>当前用户名<span class="o">]</span>.github.io
&gt; <span class="sb">```</span>bash
&gt; git init
&gt; git remote add origin <span class="o">[</span>仓库地址<span class="o">]</span>.git
&gt; git add .
&gt; git commit -m <span class="s1">&#39;#&#39;</span>
&gt; git push -u origin master
&gt; <span class="sb">```</span>

之后即可访问https://<span class="o">[</span>当前用户名<span class="o">]</span>.github.io

---

<span class="c1">## 新文章创建</span>
1. hugo new post/content_name.md
2. 直接于 根目录/content/post 中创建新的md文件即可
3. 注意文章头部格式如本篇
</code></pre></div><p>echo +++ title = “Win10下用Hugo把博客搭建到gitpages上” tags = [“hugo”, “blog”] date = “2019-08-02T20:01:56+08:00” +++</p>
<pre><code>   主题与主题使用的格式可能不相同

   每次更改主题之后先hugo一下或者hugo server一下自动生成测试文章  
   之后参考测试模板文章更改文章头部信息即可
4. 将更改推送到github
</code></pre><p>bash cd public git add . git commit -m ‘#’ git push -u origin master ``` 5. 刷新浏览器缓存即可见到新文章已经在站点中了</p>
</blockquote>
<hr>
<h1 id="参考资料">参考资料</h1>
<pre><code> hugo中文资料网  https://www.gohugo.org/  
 官方主题列表  https://themes.gohugo.io/  
</code></pre>]]></content>
		</item>
		
		<item>
			<title>wordpress docker版 从ubuntu装好到打开博客01</title>
			<link>http://stc214.github.io/posts/2020_06_30_15_04_17/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/2020_06_30_15_04_17/</guid>
			<description>apt换源 # 备份源地址文件 cp /etc/apt/sources.list /etc/apt/sources.list.bak # 编辑源地址文件 vim /etc/apt/sources.list # 替换源地址 一般没有特别情况直接讲域名替换为国内源的域名即可 其他内容无需修改 # vim内搜索为 esc :/搜索内容 国内源： mirrors.aliyun.com 阿里云
mirrors.tuna.tsinghua.edu.cn 清华
mirrors.ustc.edu.cn 中科大 mirrors.163.com 163
apt update apt upgrade -y 设定静态ip 默认情况下 网络配置文件内容如下 ubuntu1804:~$ cat /etc/netplan/50-cloud-init.yaml
network: ethernets: eth0: dhcp4: true addresses: [] version: 2 复制一份文件备份以防万一
cp /etc/netplan/50-cloud-init.yaml /etc/netplan/50-cloud-init.yaml.bak 修改文件内容
vim /etc/netplan/50-cloud-init.yaml 关闭dhcp4
dhcp4: false 设置静态ip 掩码网关和dns服务器（一定要填dns服务器，否则会导致docker出现莫名其妙的500错误）成品为：
network: ethernets: eth0: dhcp4: false addresses: [192.168.1.100/24] optional: true gateway4: 192.168.1.1 nameservers: addresses: [223.</description>
			<content type="html"><![CDATA[<h2 id="apt换源">apt换源</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 备份源地址文件</span>
cp /etc/apt/sources.list /etc/apt/sources.list.bak
<span class="c1"># 编辑源地址文件</span>
vim /etc/apt/sources.list
<span class="c1"># 替换源地址 一般没有特别情况直接讲域名替换为国内源的域名即可 其他内容无需修改</span>
<span class="c1"># vim内搜索为 esc :/搜索内容</span>
</code></pre></div><p>国内源：
mirrors.aliyun.com  阿里云<br>
mirrors.tuna.tsinghua.edu.cn  清华<br>
mirrors.ustc.edu.cn  中科大
mirrors.163.com  163</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">apt update
apt upgrade -y
</code></pre></div><h5 id="设定静态ip">设定静态ip</h5>
<p>默认情况下 网络配置文件内容如下
ubuntu1804:~$ cat /etc/netplan/50-cloud-init.yaml</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="err">network:</span>
    <span class="err">ethernets:</span>
        <span class="err">eth</span><span class="mi">0</span><span class="err">:</span>
            <span class="err">dhcp</span><span class="mi">4</span><span class="err">:</span> <span class="kc">true</span>
            <span class="err">addresses:</span> <span class="p">[]</span>
 
    <span class="err">version:</span> <span class="mi">2</span>

</code></pre></div><p>复制一份文件备份以防万一</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">cp /etc/netplan/50-cloud-init.yaml /etc/netplan/50-cloud-init.yaml.bak
</code></pre></div><p>修改文件内容</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">vim /etc/netplan/50-cloud-init.yaml
</code></pre></div><p>关闭dhcp4</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">dhcp4: <span class="nb">false</span>
</code></pre></div><p>设置静态ip 掩码网关和dns服务器（一定要填dns服务器，否则会导致docker出现莫名其妙的500错误）成品为：</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="err">network:</span>
    <span class="err">ethernets:</span>
        <span class="err">eth</span><span class="mi">0</span><span class="err">:</span>
            <span class="err">dhcp</span><span class="mi">4</span><span class="err">:</span> <span class="kc">false</span>
            <span class="err">addresses:</span> <span class="p">[</span><span class="mf">192.168</span><span class="err">.</span><span class="mf">1.100</span><span class="err">/</span><span class="mi">24</span><span class="p">]</span>
            <span class="err">optional:</span> <span class="kc">true</span>
            <span class="err">gateway</span><span class="mi">4</span><span class="err">:</span> <span class="mf">192.168</span><span class="err">.</span><span class="mf">1.1</span>
            <span class="err">nameservers:</span>
                    <span class="err">addresses:</span> <span class="p">[</span><span class="mf">223.5</span><span class="err">.</span><span class="mf">5.5</span><span class="p">,</span><span class="mf">223.6</span><span class="err">.</span><span class="mf">6.6</span><span class="p">]</span>
 
    <span class="err">version:</span> <span class="mi">2</span>
</code></pre></div><p>不报错的话
保存后重启网络服务</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">netplan apply

<span class="c1"># 可以通过以下命令或者重新链接终端确定是否修改成功</span>
ifconfig -a
</code></pre></div><h2 id="设置开机启动脚本">设置开机启动脚本</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">vim /etc/rc.local
<span class="c1"># 在 exit 0这一行之前添加内容即可 如：</span>
sudo docker images 
<span class="c1"># 或者挂载磁盘的命令</span>
</code></pre></div><p>启动脚本扩展：</p>
<h5 id="如果没有rcloacl文件">如果没有rc.loacl文件</h5>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">       <span class="err">ubuntu</span> <span class="mf">18.04</span> <span class="err">不再使用</span> <span class="err">inited</span> <span class="err">管理系统，改用</span> <span class="err">systemd</span> 
       <span class="err">虽然是进步，但很多人（包括我）还是喜欢用原本简单方便的</span> <span class="err">rc.local</span> <span class="err">作为系统启动脚本</span>
       <span class="err">systemd</span> <span class="err">里面有个</span> <span class="err">rc-local.service</span> <span class="err">文件，里面有写到</span> <span class="err">rc.local</span> <span class="err">的启动顺序和行为，但是没用写加载这个</span> <span class="err">rc-local.service</span> <span class="err">。也就是说我们需要给它写上这个。</span>

<span class="err">sudo</span> <span class="err">vim</span> <span class="err">/etc/systemd/system/rc-local.service</span>

<span class="err">在文件后加上如下内容：</span>

    <span class="p">[</span><span class="err">Install</span><span class="p">]</span>
    <span class="err">WantedBy=multi-user.target</span>
    <span class="err">Alias=rc-local.service</span>

<span class="err">或者直接用一行命令把内容写进去：</span>

    <span class="err">sudo</span> <span class="err">echo</span> <span class="s2">&#34;
</span><span class="s2">    [Install]
</span><span class="s2">    WantedBy=multi-user.target
</span><span class="s2">    Alias=rc-local.service
</span><span class="s2">    &#34;</span> <span class="err">&gt;&gt;</span> <span class="err">etc/systemd/system/rc-local.service</span>

 
       <span class="err">接下来就创建属于我们的</span> <span class="err">`/etc/rc.local`</span> <span class="err">`bash`</span> <span class="err">脚本吧</span>

    <span class="err">sudo</span> <span class="err">touch</span> <span class="err">/etc/rc.local</span>
    <span class="err">chmod</span> <span class="mi">755</span> <span class="err">/etc/rc.local</span>

<span class="err">写入</span> <span class="err">`bash`</span> <span class="err">脚本执行的编译器</span>

<span class="err">sudo</span> <span class="err">echo</span> <span class="s2">&#34;#!/bin/bash&#34;</span> <span class="err">&gt;</span> <span class="err">/etc/rc.local</span>

<span class="err">到此为止，和以前一样的</span> <span class="err">`rc.local`</span> <span class="err">就完成了！</span>

</code></pre></div><h2 id="设置定时重启">设置定时重启</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">cp /etc/crontab /etc/crontab.bak
<span class="c1"># 在文件最后一行之前的部分添加内容即可</span>
<span class="m">0</span> <span class="m">2</span> * * * reboot /bin/sh
</code></pre></div><p>定时重启扩展内容
<a href="http://stc14.top">http://stc14.top</a>:18080/?p=17<br>
<a href="http://stc14.top">http://stc14.top</a>:18080/?p=16</p>
]]></content>
		</item>
		
		<item>
			<title>wordpress docker版 从ubuntu装好到打开博客02</title>
			<link>http://stc214.github.io/posts/2020_06_30_15_02_26/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/2020_06_30_15_02_26/</guid>
			<description>docker # 以树莓派ubuntu server 20.04版为例 apt install docker.io -y linux版本不同docker安装的版本可能也不同 一般有 docker / docker-ce / docker.io 等
换源 # 先运行一次docker命令 生成文件 docker images # 备份源文件（如果有） cp /etc/docker/daemon.json /etc/docker/daemon.json.bak # 编辑 vim /etc/docker/daemon.json # 填入内容 { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://docker.mirrors.ustc.edu.cn&amp;#34;] } # 保存退出并重启docker service docker restart 其他docker源参考:
不得不说 docker的火爆程度已经达到的地步， 由于国外docker搭建太慢，国外的安装文档也很全面，这里就不在详述，详情可以点击这里： 正主：Docker 官方镜像加速：http://www.docker-cn.com/registry-mirror 在这里打算记录下使用国内源快速搭建docker的方法：Daocloud极速下载真的是快啊～～～ 在 Linux上 安装 Docker curl -sSL https://get.daocloud.io/docker | sh 适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源 当然有时候不知道为什么daocloud响应不了，用阿里云的： 用阿里云的： 安装最新版本的Docker Engine curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet| sh - 安装1.9.1版本的Docker Engine curl -sSL http://acs-public-mirror.</description>
			<content type="html"><![CDATA[<h2 id="docker">docker</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 以树莓派ubuntu server 20.04版为例</span>
apt install docker.io -y
</code></pre></div><p>linux版本不同docker安装的版本可能也不同
一般有 docker / docker-ce / docker.io 等</p>
<h5 id="换源">换源</h5>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 先运行一次docker命令 生成文件</span>
docker images

<span class="c1"># 备份源文件（如果有）</span>
cp /etc/docker/daemon.json /etc/docker/daemon.json.bak

<span class="c1"># 编辑</span>
vim /etc/docker/daemon.json

<span class="c1"># 填入内容</span>
<span class="o">{</span>

<span class="s2">&#34;registry-mirrors&#34;</span>: <span class="o">[</span><span class="s2">&#34;https://docker.mirrors.ustc.edu.cn&#34;</span><span class="o">]</span>

<span class="o">}</span>

<span class="c1"># 保存退出并重启docker</span> 
service docker restart
</code></pre></div><p>其他docker源参考:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">
<span class="err">不得不说</span> <span class="err">docker的火爆程度已经达到的地步，</span>

<span class="err">由于国外docker搭建太慢，国外的安装文档也很全面，这里就不在详述，详情可以点击这里：</span>

<span class="err">正主：Docker</span> <span class="err">官方镜像加速：http://www.docker-cn.com/registry-mirror</span>

<span class="err">在这里打算记录下使用国内源快速搭建docker的方法：Daocloud极速下载真的是快啊～～～</span>
<span class="err">在</span> <span class="err">Linux上</span> <span class="err">安装</span> <span class="err">Docker</span>

<span class="err">curl</span> <span class="err">-sSL</span> <span class="err">https://get.daocloud.io/docker</span> <span class="err">|</span> <span class="err">sh</span> 

<span class="err">适用于Ubuntu，Debian,Centos等大部分Linux，会</span><span class="mi">3</span><span class="err">小时同步一次Docker官方资源</span>

<span class="err">当然有时候不知道为什么daocloud响应不了，用阿里云的：</span>

<span class="err">用阿里云的：</span>

<span class="err">安装最新版本的Docker</span> <span class="err">Engine</span>

<span class="err">curl</span> <span class="err">-sSL</span> <span class="err">http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet|</span> <span class="err">sh</span> <span class="err">-</span>

<span class="err">安装</span><span class="mf">1.9</span><span class="err">.</span><span class="mi">1</span><span class="err">版本的Docker</span> <span class="err">Engine</span>

<span class="err">curl</span> <span class="err">-sSL</span> <span class="err">http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet|</span> <span class="err">sh</span> <span class="err">/dev/stdin</span> <span class="mf">1.9</span><span class="err">.</span><span class="mi">1</span>

<span class="err">如果你的机器是阿里云主机，那么可以通过以下脚本，通过内网地址进行安装。</span>

<span class="err">curl</span> <span class="err">-sSL</span> <span class="err">http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/intranet|</span> <span class="err">sh</span> <span class="err">-</span>


<span class="err">安装</span> <span class="err">Docker</span> <span class="err">Compose</span>

<span class="err">Docker</span> <span class="err">Compose存放在Git</span> <span class="err">Hub，不太稳定。</span>

<span class="err">你可以也通过执行下面的命令，高速安装Docker</span> <span class="err">Compose。</span>

<span class="err">curl</span> <span class="err">-L</span> <span class="err">https://get.daocloud.io/docker/compose/releases/download/</span><span class="mf">1.14</span><span class="err">.</span><span class="mi">0</span><span class="err">/docker-compose-`uname</span> <span class="err">-s`-`uname</span> <span class="err">-m`</span> <span class="err">&gt;</span> <span class="err">/usr/local/bin/docker-compose</span>

<span class="err">chmod</span>  <span class="err">+x</span>  <span class="err">/usr/local/bin/docker-compose</span>

<span class="err">你可以通过修改URL中的版本，可以自定义您的需要的版本。</span>
<span class="err">Docker更换镜像源</span>

<span class="err">有位博主说的好，国内有</span><span class="mi">4</span><span class="err">家感觉还可以的镜像源.</span>
<span class="err">选择一：老东家的</span>  <span class="err">daocloud：</span>

<span class="err">老东家提供的daocloud加速器，需要用户注册，每个用户每个月限制</span><span class="mi">10</span><span class="err">GB</span>

<span class="err">不过也感觉非常快，注册也相当容器，不需要验证邮箱噢～～～&gt;-&lt;</span>

<span class="err">curl</span> <span class="err">-sSL</span> <span class="err">https://get.daocloud.io/daotools/set_mirror.sh</span> <span class="err">|</span> <span class="err">sh</span> <span class="err">-s</span> <span class="err">http://</span><span class="mf">67e93489</span><span class="err">.m.daocloud.io</span>

<span class="err">curl</span> <span class="err">-sSL</span> <span class="err">https://get.daocloud.io/daotools/set_mirror.sh</span> <span class="err">|</span> <span class="err">sh</span> <span class="err">-s</span> <span class="err">http://f</span><span class="mi">7291398</span><span class="err">.m.daocloud.io</span>

<span class="err">具体来说</span>  <span class="err">daocloud的模式就是将你的id也就是shell</span><span class="mi">123</span><span class="err">转化成</span><span class="mf">67e93489</span><span class="err">，其格式为：</span>

<span class="err">curl-sSL</span> <span class="err">https://get.daocloud.io/daotools/set_mirror.sh</span> <span class="err">|</span> <span class="err">sh-shttp://</span><span class="p">{</span><span class="err">your_id</span><span class="p">}</span><span class="err">.m.daocloud.io</span>

<span class="err">事实上，实际改的是</span>

<span class="err">ExecStart=/usr/bin/docker-current</span> <span class="err">daemon</span> <span class="err">--registry-mirror=http://</span><span class="p">{</span><span class="err">your_id</span><span class="p">}</span><span class="err">.m.daocloud.io\</span>

<span class="err">记得设置后，需要重新启动</span>  <span class="err">sudo</span> <span class="err">service</span> <span class="err">docker</span> <span class="err">restart</span>
<span class="err">选择二：ustc</span> <span class="err">中科大的docker源</span> <span class="err">也是超级好的</span>

<span class="err">官方文档也写的非常好，有兴趣可以看看</span>


<span class="err">配置方法：</span>

<span class="err">新版的</span> <span class="err">Docker</span> <span class="err">使用</span> <span class="err">/etc/docker/daemon.json（Linux）</span> <span class="err">或者</span> <span class="err">%programdata%\docker\config\daemon.json（Windows）</span> <span class="err">来配置</span> <span class="err">Daemon。</span>

<span class="err">请在该配置文件中加入（没有该文件的话，请先建一个）：</span>

<span class="p">{</span>

<span class="nt">&#34;registry-mirrors&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;https://docker.mirrors.ustc.edu.cn&#34;</span><span class="p">]</span>

<span class="p">}</span>

<span class="err">亦即：$~</span> <span class="err">sudo</span> <span class="err">vim</span> <span class="err">/etc/docker/daemon.json</span>  <span class="err">写入：</span>

<span class="p">{</span><span class="nt">&#34;registry-mirrors&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;https://docker.mirrors.ustc.edu.cn&#34;</span><span class="p">]}</span><span class="err">这一行</span> <span class="err">然后重启docker服务即可.</span>

<span class="err">选择三：网易蜂巢的镜像源，个人感觉上面的镜像好少，而且有时候pull他们的镜像还会失败，不过如果要写dockerfile的话，可以到上面参考参考，dockerfile他们到时写的很详细噢～</span>

<span class="err">$~</span> <span class="err">sudo</span> <span class="err">echo</span><span class="s2">&#34;DOCKER_OPTS=\&#34;--registry-mirror=http://hub-mirror.c.163.com\&#34;&#34;</span><span class="err">&gt;&gt;/etc/default/docker</span>

<span class="err">$~</span> <span class="err">service</span> <span class="err">docker</span> <span class="err">restart</span>

<span class="err">最后一个选择：阿里的alicloud</span>

<span class="err">个人感觉繁琐的是在注册上：不光要注册为阿里云的用户，还得加入开发者平台。不过提着眼睛做完这些以后，它的服务还真是不错，基本</span><span class="mi">1</span><span class="err">MB/s的pull速度(部分原因可能是因为我也在杭州吧)。配置方法跟daocloud类似，也是开通加速器以后给一个url。</span>

<span class="err">ExecStart=/usr/bin/docker-current</span> <span class="err">daemon</span> <span class="err">--registry-mirror=https://</span><span class="p">{</span><span class="err">your_id</span><span class="p">}</span><span class="err">.mirror.aliyuncs.com\</span>

<span class="err">阿里的你们可以去尝试，如果不是阿里云的EMS用户的话，个人不太推荐。</span>
<span class="err">所以本人</span> <span class="err">强烈推荐！！强烈推荐！！使用ustc的！！！！</span>
<span class="err">#Docker-machine安装</span>

<span class="err">参照官网的教程：https://docs.docker.com/machine/install-machine/</span>

<span class="err">linux用户安装方式为：$~</span>  <span class="err">curl-L</span> <span class="err">https://github.com/docker/machine/releases/download/v</span><span class="mf">0.10</span><span class="err">.</span><span class="mi">0</span><span class="err">/docker-machine-`uname</span> <span class="err">-s`-`uname</span> <span class="err">-m`</span> <span class="err">&gt;/tmp/docker-machine</span> <span class="err">&amp;&amp;chmod</span> <span class="err">+x</span> <span class="err">/tmp/docker-machine</span> <span class="err">&amp;&amp;</span>  <span class="err">sudo</span> <span class="err">cp</span> <span class="err">/tmp/docker-machine</span> <span class="err">/usr/local/bin/docker-machine</span>
</code></pre></div><h4 id="拉取docker镜像">拉取docker镜像</h4>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker pull wordpress  

<span class="c1"># 拉取管理工具</span>
docker pull portainer/portainer  

</code></pre></div><p>换源之后就快很多了~！</p>
<h4 id="运行容器">运行容器</h4>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># wordpress</span>
docker run -d --name wordpress --restart<span class="o">=</span>always -p 8880:80 wordpress


<span class="c1"># portainer</span>
docker volume create portainer_data

docker run -d -p 9000:9000 --name pter --restart<span class="o">=</span>always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer


<span class="c1"># nextcloud</span>
docker run -d -p 9999:80 --name nextcloud --restart<span class="o">=</span>always -v /media/hardisk1:/inside_docker/hahardisk1 nextcloud

</code></pre></div><p>portainer根据所处环境选择是本地还是远程管理
参考文章：http://www.senra.me/docker-management-panel-series-portainer/
<a href="http://stc14.top">http://stc14.top</a>:18080/?p=19</p>
<h2 id="后续修改">后续修改</h2>
<p>wordpress容器默认上传限制为2M，这实在是太少了，本文介绍如何修改docker中wordpress的上传限制。
步骤</p>
<h6 id="1-进入wordpress容器">1. 进入wordpress容器</h6>
<p>docker exec -it wordpress /bin/bash</p>
<h6 id="wordpress是你wordpress的容器id或名称">wordpress是你wordpress的容器id或名称</h6>
<h6 id="2-复制phpini">2. 复制php.ini</h6>
<h6 id="复制配置文件以便php配置生效">复制配置文件，以便php配置生效</h6>
<p>cp /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.ini</p>
<h6 id="3-修改phpini">3. 修改php.ini</h6>
<p>没有安装文本编辑软件的请参考：https://blog.csdn.net/j84491135/article/details/105938672</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">vim /usr/local/etc/php/php.ini
</code></pre></div><p>找到以下三个关键值，修改成你想要的值，注意 <br>
memory_limit&gt;post_max_size&gt;upload_max_filesize
PS：vim查找命令为:/要查找的字符串，n下一个，N上一个</p>
<p>upload_max_filesize = 200M	#文件大小限制
post_max_size = 250M	#post大小限制
memory_limit = 500M		#内存占用限制</p>
<p>如果还要修改其他配置如开启文件上传、上传超时等等去查配置文件即可，不再赘述。</p>
<h6 id="4-重启容器">4. 重启容器</h6>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker restart wordpress
</code></pre></div><h3 id="容器内没有vim的情况">容器内没有vim的情况</h3>
<p>因为该源是不用GPG验证的，可能不安全，但因为docker容器没有验证GPG的工具所以只能先用这个源然后安装GPG验证相关软件包再更换回正式源。
步骤</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">mv /etc/apt/sources.list /etc/apt/sources.list.bak

cat <span class="s">&lt;&lt;EOF &gt;/etc/apt/sources.list
</span><span class="s">deb http://mirrors.ustc.edu.cn/debian stable main contrib non-free
</span><span class="s">deb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free
</span><span class="s">EOF</span>

apt update
</code></pre></div><h3 id="添加docker启动项">添加docker启动项</h3>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">vim /etc/rc.local
<span class="c1"># 在exit 0之前加入</span>

sudo docker start <span class="k">$(</span>docker ps -a <span class="p">|</span> awk <span class="s1">&#39;{ print $1}&#39;</span> <span class="p">|</span> tail -n +2<span class="k">)</span>

</code></pre></div><p>另外：
docker中 启动所有的容器命令</p>
<p>docker start $(docker ps -a | awk &lsquo;{ print $1}&rsquo; | tail -n +2)</p>
<p>docker中    关闭所有的容器命令</p>
<p>docker stop $(docker ps -a | awk &lsquo;{ print $1}&rsquo; | tail -n +2)</p>
<p>docker中 删除所有的容器命令</p>
<p>docker rm $(docker ps -a | awk &lsquo;{ print $1}&rsquo; | tail -n +2)</p>
<p>docker中    删除所有的镜像</p>
<p>docker rmi $(docker images | awk &lsquo;{print $3}&rsquo; |tail -n +2)</p>
]]></content>
		</item>
		
		<item>
			<title>wordpress docker版 从ubuntu装好到打开博客03</title>
			<link>http://stc214.github.io/posts/2020_06_30_14_57_09/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/2020_06_30_14_57_09/</guid>
			<description>发布 绑定域名 访问 简单的局域网环境访问 直接用过ip+设置的端口即可直接访问 如果路由器有端口转发功能也需要设置
外网访问 1.通过ddns将设置的域名解析到路由器上
2.设置路由器防火墙规则 品牌路由官方固件则直接无视 一般防火墙规则会在设置端口转发等相关功能之后自动设置 软路由则按照规则（不了解则默认全部选择接受）设置
3.设置端口转发
OK 到此应该可以正常公网使用域名访问了
访问不了  通过命令行刷新dns缓存 检查ddns设置 检查ddns日志是否成功更新ip 检查域名是否已经更新好ip 一切正常依然无法访问再次刷新dns滑轮 步骤1-5全部检查无误依然不行则属于路由器固件问题  推荐lean的固件 下载地址在恩山论坛搜索
树莓派固件项目地址： https://github.com/SuLingGG/OpenWrt-Rpi https://github.com/scenerycm/OpenWrt-Raspi</description>
			<content type="html"><![CDATA[<h2 id="发布-绑定域名-访问">发布 绑定域名 访问</h2>
<h5 id="简单的局域网环境访问">简单的局域网环境访问</h5>
<p>直接用过ip+设置的端口即可直接访问
如果路由器有端口转发功能也需要设置</p>
<h5 id="外网访问">外网访问</h5>
<p>1.通过ddns将设置的域名解析到路由器上</p>
<p>2.设置路由器防火墙规则
品牌路由官方固件则直接无视 一般防火墙规则会在设置端口转发等相关功能之后自动设置
软路由则按照规则（不了解则默认全部选择接受）设置</p>
<p>3.设置端口转发</p>
<p>OK 到此应该可以正常公网使用域名访问了</p>
<h5 id="访问不了">访问不了</h5>
<ol>
<li>通过命令行刷新dns缓存</li>
<li>检查ddns设置</li>
<li>检查ddns日志是否成功更新ip</li>
<li>检查域名是否已经更新好ip</li>
<li>一切正常依然无法访问再次刷新dns滑轮</li>
<li>步骤1-5全部检查无误依然不行则属于路由器固件问题</li>
</ol>
<h6 id="推荐lean的固件">推荐lean的固件</h6>
<p>下载地址在恩山论坛搜索</p>
<h5 id="树莓派固件项目地址">树莓派固件项目地址：</h5>
<p><a href="https://github.com/SuLingGG/OpenWrt-Rpi">https://github.com/SuLingGG/OpenWrt-Rpi</a>
<a href="https://github.com/scenerycm/OpenWrt-Raspi">https://github.com/scenerycm/OpenWrt-Raspi</a></p>
]]></content>
		</item>
		
		<item>
			<title>wordpress 必备插件</title>
			<link>http://stc214.github.io/posts/2020_06_30_15_04_54/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/2020_06_30_15_04_54/</guid>
			<description>WP-China-Yes  这是一个颠覆性的插件，她将全面改善中国大陆站点在访问WP官方服务时的用户体验，其原理是将位于国外的官方仓库源替换为由社区志愿者维护的国内源，以此达到加速访问的目的。
 Autoptimize  通过优化CSS，JS，图像，Google字体等来使您的网站更快。
 Enlighter - Customizable Syntax Highlighter  语法高亮插件
 Really Simple CAPTCHA  验证码插件
 WP Githuber MD  markdown编辑器 一个为 WordPress 网站提供全功能 Markdown 语法的插件。
 WP User Avatar  使用WordPress媒体库中的图片作为默认头像。请添加您自己的默认头像。
 待补充 </description>
			<content type="html"><![CDATA[<h1 id="wp-china-yes">WP-China-Yes</h1>
<blockquote>
<p>这是一个颠覆性的插件，她将全面改善中国大陆站点在访问WP官方服务时的用户体验，其原理是将位于国外的官方仓库源替换为由社区志愿者维护的国内源，以此达到加速访问的目的。</p>
</blockquote>
<h4 id="autoptimize">Autoptimize</h4>
<blockquote>
<p>通过优化CSS，JS，图像，Google字体等来使您的网站更快。</p>
</blockquote>
<h4 id="enlighter---customizable-syntax-highlighter">Enlighter - Customizable Syntax Highlighter</h4>
<blockquote>
<p>语法高亮插件</p>
</blockquote>
<h4 id="really-simple-captcha">Really Simple CAPTCHA</h4>
<blockquote>
<p>验证码插件</p>
</blockquote>
<h4 id="wp-githuber-md">WP Githuber MD</h4>
<blockquote>
<p>markdown编辑器 一个为 WordPress 网站提供全功能 Markdown 语法的插件。</p>
</blockquote>
<h4 id="wp-user-avatar">WP User Avatar</h4>
<blockquote>
<p>使用WordPress媒体库中的图片作为默认头像。请添加您自己的默认头像。</p>
</blockquote>
<h2 id="待补充">待补充</h2>
]]></content>
		</item>
		
		<item>
			<title>关于定时执行任务：Crontab的20个例子</title>
			<link>http://stc214.github.io/posts/2020_06_30_15_02_59/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/2020_06_30_15_02_59/</guid>
			<description>简介
Linux crontab和Windows task schedules非常的相似。Crontab可以用来在系统中定期的执行任务。比如：写了一个爬虫需要每天早上八点执行，就可以用到Crontab;安装的Tomcat服务器需要每天凌晨重启一次，也可以使用到Crontab。总之，几乎所有的定时任务，我们都可以通过Crontab这个工具来完成。 安装 yum install cronie` Crontab在Linux上的结构
crontab结构.png
从左到右依次为： [分钟] [小时] [每月的某一天] [每年的某一月] [每周的某一天] [执行的命令] 注意：请留意每个选项的取值范围。
如何 添加/编辑 Crontab
添加或更新crontab中的命令  crontab -e
默认情况下，系统会编辑当前登录用户的crontab命令集合。需要编辑其他用户的命令集合，需要使用到如下的命令 crontab -u username -e 查看Crontab命令集合
查看当前系统登录用户的Crontab命令集合  crontab -l
查看其他用户的Crontab命令集合  crontab -u username -l 20个超实用的Crontab使用实例
每天 02:00 执行任务  0 2 * * * /bin/sh backup.sh
每天 5:00和17:00执行任务  0 5,17 * * * /scripts/script.sh
每分钟执行一次任务 通常情况下，我们并没有每分钟都需要执行的脚本(默默的想到了12306--)           /scripts/script.</description>
			<content type="html"><![CDATA[<p>简介</p>
<p>Linux crontab和Windows task schedules非常的相似。Crontab可以用来在系统中定期的执行任务。比如：写了一个爬虫需要每天早上八点执行，就可以用到Crontab;安装的Tomcat服务器需要每天凌晨重启一次，也可以使用到Crontab。总之，几乎所有的定时任务，我们都可以通过Crontab这个工具来完成。
安装
yum install cronie`
Crontab在Linux上的结构</p>
<p>crontab结构.png</p>
<p>从左到右依次为：
[分钟] [小时] [每月的某一天] [每年的某一月] [每周的某一天] [执行的命令]
注意：请留意每个选项的取值范围。</p>
<p>如何 添加/编辑 Crontab</p>
<pre><code>添加或更新crontab中的命令
</code></pre>
<p>crontab -e</p>
<p>默认情况下，系统会编辑当前登录用户的crontab命令集合。需要编辑其他用户的命令集合，需要使用到如下的命令
crontab -u username -e
查看Crontab命令集合</p>
<pre><code>查看当前系统登录用户的Crontab命令集合
</code></pre>
<p>crontab -l</p>
<pre><code>查看其他用户的Crontab命令集合
</code></pre>
<p>crontab -u username -l
20个超实用的Crontab使用实例</p>
<pre><code>每天 02:00 执行任务
</code></pre>
<p>0 2 * * * /bin/sh backup.sh</p>
<pre><code>每天 5:00和17:00执行任务
</code></pre>
<p>0 5,17 * * * /scripts/script.sh</p>
<pre><code>每分钟执行一次任务
通常情况下，我们并没有每分钟都需要执行的脚本(默默的想到了12306--)
</code></pre>
<ul>
<li>
<ul>
<li>
<ul>
<li>
<ul>
<li>
<ul>
<li>/scripts/script.sh</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>每周日 17:00 执行任务</p>
</li>
</ul>
<p>0 17 * * sun  /scripts/script.sh</p>
<pre><code>每 10min 执行一次任务
</code></pre>
<p>*/10 * * * * /scripts/monitor.sh</p>
<pre><code>在特定的某几个月执行任务
</code></pre>
<ul>
<li>
<ul>
<li>
<ul>
<li>jan,may,aug * /script/script.sh</li>
</ul>
</li>
</ul>
<p>在特定的某几天执行任务</p>
</li>
</ul>
<p>0 17 * * sun,fri /script/scripy.sh</p>
<p>在每周五、周日的17点执行任务</p>
<pre><code>在某个月的第一个周日执行任务
</code></pre>
<p>0 2 * * sun  [ $(date +%d) -le 07 ] &amp;&amp; /script/script.sh</p>
<pre><code>每四个小时执行一个任务
</code></pre>
<p>0 */4 * * * /scripts/script.sh</p>
<pre><code>每周一、周日执行任务
</code></pre>
<p>0 4,17 * * sun,mon /scripts/script.sh</p>
<pre><code>每个30秒执行一次任务
我们没有办法直接通过上诉类似的例子去执行，因为最小的是1min。但是我们可以通过如下的方法。
</code></pre>
<ul>
<li>
<ul>
<li>
<ul>
<li>
<ul>
<li>
<ul>
<li>/scripts/script.sh</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>
<ul>
<li>
<ul>
<li>sleep 30; /scripts/script.sh</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>多个任务在一条命令中配置</p>
</li>
<li>
<ul>
<li>
<ul>
<li>
<ul>
<li>
<ul>
<li>/scripts/script.sh; /scripts/scrit2.sh</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>每年执行一次任务</p>
</li>
</ul>
<p>@yearly /scripts/script.sh</p>
<p>@yearly 类似于“0 0 1 1 *”。它会在每年的第一分钟内执行，通常我们可以用这个发送新年的问候。</p>
<pre><code>每月执行一次任务
</code></pre>
<p>@yearly /scripts/script.sh</p>
<pre><code>每周执行一次任务
</code></pre>
<p>@yearly /scripts/script.sh</p>
<pre><code>每天执行一次任务
</code></pre>
<p>@yearly /scripts/script.sh</p>
<pre><code>每分钟执行一次任务
</code></pre>
<p>@yearly /scripts/script.sh</p>
<pre><code>系统重启时执行
</code></pre>
<p>@reboot /scripts/script.sh</p>
<pre><code>将 Cron 结果重定向的特定的账户
默认情况下，cron 只会将结果详情发送给 cron 被制定的用户。如果需要发送给其他用户，可以通过如下的方式：
</code></pre>
<h1 id="crontab--l">crontab -l</h1>
<p>MAIL=bob
0 2 * * * /script/backup.sh</p>
<pre><code>将所有的 cron 命令备份到文本文件当中
这是一个当我们丢失了cron命令后方便快速的一个恢复方式。
下面是利用这个方式恢复cron的一个小例子。（看看就行~）
首先：检查当前的cron
</code></pre>
<h1 id="crontab--l-1">crontab -l</h1>
<p>MAIL=rahul
0 2 * * * /script/backup.sh</p>
<p>然后：备份cron到文件中</p>
<h1 id="crontab--l--cron-backuptxt">crontab -l &gt; cron-backup.txt</h1>
<h1 id="cat-cron-backuptxt">cat cron-backup.txt</h1>
<p>MAIL=rahul
0 2 * * * /script/backup.sh</p>
<p>接着：移除当前的cron</p>
<h1 id="crontab--r">crontab -r</h1>
<h1 id="crontab--l-2">crontab -l</h1>
<p>no crontab for root</p>
<p>恢复：从text file中恢复</p>
<h1 id="crontab-cron-backuptxt">crontab cron-backup.txt</h1>
<h1 id="crontab--l-3">crontab -l</h1>
<p>MAIL=rahul
0 2 * * * /script/backup.sh
原文链接</p>
<p>Crontab in Linux with 20 Useful Examples to Schedule Jobs</p>
<p>作者：LeeLom
链接：https://www.jianshu.com/p/d93e2b177814</p>
]]></content>
		</item>
		
		<item>
			<title>开启 cmd cmder 代理</title>
			<link>http://stc214.github.io/posts/2020_06_30_14_48_30/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>http://stc214.github.io/posts/2020_06_30_14_48_30/</guid>
			<description>win10安装了ShadowSocks软件，浏览器通过代理后就可以***，但有时候需要通过cmd科学下载安装一些组件，就需要设置一下cmd的代理
cmd如果要设置代理的话，需要在执行其他命令之前，先执行一下
set http_proxy=http://127.0.0.1:7008 set https_proxy=http://127.0.0.1:7008 cmder如果使用的是bash模式，则先执行一下
export http_proxy=http://127.0.0.1:7008 export https_proxy=http://127.0.0.1:7008 PowerShell ：
$env:http_proxy=http://127.0.0.1:7008 $env:https_proxy=http://127.0.0.1:7008 上面命令的作用是设置环境变量，不用担心，这种环境变量只会持续到cmd窗口关闭，不是系统环境变量
测试是否成功用 curl https://www.google.com, 别用ping</description>
			<content type="html"><![CDATA[<p><a href="https://s2.ax1x.com/2019/08/04/e6mE60.jpg">
<img src="https://s2.ax1x.com/2019/08/04/e6mE60.jpg" alt="img"></a></p>
<p>win10安装了ShadowSocks软件，浏览器通过代理后就可以***，但有时候需要通过cmd科学下载安装一些组件，就需要设置一下cmd的代理</p>
<p>cmd如果要设置代理的话，需要在执行其他命令之前，先执行一下</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">set</span> <span class="nv">http_proxy</span><span class="o">=</span>http://127.0.0.1:7008
<span class="nb">set</span> <span class="nv">https_proxy</span><span class="o">=</span>http://127.0.0.1:7008
</code></pre></div><p>cmder如果使用的是bash模式，则先执行一下</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">http_proxy</span><span class="o">=</span>http://127.0.0.1:7008
<span class="nb">export</span> <span class="nv">https_proxy</span><span class="o">=</span>http://127.0.0.1:7008
</code></pre></div><p>PowerShell ：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">$env</span>:http_proxy<span class="o">=</span>http://127.0.0.1:7008
<span class="nv">$env</span>:https_proxy<span class="o">=</span>http://127.0.0.1:7008
</code></pre></div><p>上面命令的作用是设置环境变量，不用担心，这种环境变量只会持续到cmd窗口关闭，不是系统环境变量</p>
<p>测试是否成功用 curl <a href="https://www.google.com/">https://www.google.com</a>, 别用ping</p>
]]></content>
		</item>
		
	</channel>
</rss>
