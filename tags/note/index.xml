<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>note on STC214</title>
    <link>http://stc214.github.io/tags/note/</link>
    <description>Recent content in note on STC214</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    
	<atom:link href="http://stc214.github.io/tags/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker管理面板系列——Portainer(简单、美观、强大)</title>
      <link>http://stc214.github.io/posts/2020_06_30_14_57_42/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://stc214.github.io/posts/2020_06_30_14_57_42/</guid>
      <description>原文：http://www.senra.me/docker-management-panel-series-portainer/
一.介绍
Portainer是个轻量级的Docker管理面板，和Rancher这种重量级选手没法比，Portainer倾向于单机的管理(后来发现能够添加多个单机节点切换着管理)，当然，在Docker搞出Swarm之后Portainer也借此实现了集群管理。
使用官方提供的Demo预览一下
地址: http://demo.portainer.io/ 用户名: admin 密码: tryportainer
你会有一种眼前一亮的感觉，美观，而且功能全面(从边上这一长列就能感受出来)
虽然选项很多，但是其实就是命令行操作的简化，如果你用过Docker的命令行操作你能很快熟悉Portainer，和Rancher那种多了很多新花样不一样，Rancher的很多东西你看上去是摸不着头脑的，必须看着文档试一下才能大概弄清楚这是个啥。
二.安装
是不是眼馋了？那么就让我们装一下玩玩吧。
这是Portainer对Docker各版本的支持情况
Portainer的安装方式主要有两种，一个是使用Docker安装，一个是二进制文件直接跑，我建议用Docker安装，比较方便点，也不用你自己去配置自启动啥的。 其他的请参考官方文档 ——&amp;gt; 传送门
首先，我们得先把Unix套接字或者TCP监听打开，来方便连接(不过似乎Unix套接字默认是启用的，TCP需要自己开)
PS.这儿请务必注意，不能直接配0.0.0.0，因为如果不做ACL或者TLS认证会导致你的Docker被人扫到后直接控制，有可能被远程创建挖矿容器
先确认你的机器中是否存在/etc/sysconfig/docker这个配置文件，如果存在的话请修改，在其中的配置选项中加入如下内容 #这个仅允许本地连接，如果要远程的话改成0.0.0.0，但是如果是公网中远程请你自己配TLS认证或者防火墙加白名单
-Htcp://127.0.0.1:2375 -H unix:///var/run/docker.sock 但是，很多情况下我们会不存在这个文件(较高版本的Docker不会自动创建这个)，所以我们可以选择另外一种方法，参照Docker文档——&amp;gt;传送门
vi /etc/docker/daemon.json #添加如下，这个仅允许本地连接，如果要远程的话改成0.0.0.0，如果添加的不在最后一行请在末尾加上逗号
&amp;quot;hosts&amp;quot;: [&amp;quot;tcp://127.0.0.1:2375&amp;quot;, &amp;quot;unix:///var/run/docker.sock&amp;quot;] #如果deamon.json不存在请添加完整的json格式
{ &amp;#34;hosts&amp;#34;: [&amp;#34;tcp://127.0.0.1:2375&amp;#34;, &amp;#34;unix:///var/run/docker.sock&amp;#34;] } vi /etc/docker/daemon.json #添加如下，这个仅允许本地连接，如果要远程的话改成0.0.0.0，如果添加的不在最后一行请在末尾加上逗号
&amp;#34;hosts&amp;#34;: [&amp;#34;tcp://127.0.0.1:2375&amp;#34;, &amp;#34;unix:///var/run/docker.sock&amp;#34;] #如果deamon.json不存在请添加完整的json格式
{ &amp;#34;hosts&amp;#34;: [&amp;#34;tcp://127.0.0.1:2375&amp;#34;, &amp;#34;unix:///var/run/docker.sock&amp;#34;] } 虽然其实你修改启动脚本在dockerd命令之后添加 -H unix:///var/run/docker.sock -H tcp://127.0.0.1 也可以，但是这样终归不怎么优雅。
准备工作做完，然后开始安装，使用Docker安装有三种连接方式
首先是全部都需要做的操作，添加一个数据卷，当然你也可以在docker run的时候手动指定数据挂载路径，效果是一样的，将下面docker run命令中的portainer_data换成宿主机上的具体路径就OK
docker volume create portainer_data  使用Unix套接字连接单个Docker(本地)  docker run -d -p 9000:9000 -v /var/run/docker.</description>
    </item>
    
    <item>
      <title>Win10 2004版 win terminal 下载和配色</title>
      <link>http://stc214.github.io/posts/2020_06_30_14_56_01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://stc214.github.io/posts/2020_06_30_14_56_01/</guid>
      <description>下载 本步骤可能需要梯子
打开任务栏搜索图标
搜索store 打开
搜索terminal
下载安装即可
简单配置 打开win terminal
点窗口标题栏的 +
点设置打开配置文件
对应词条修改成如下样式 &amp;ldquo;copyOnSelect&amp;rdquo;: true,
其他选项根据需求配置
更改配色 打开 https://atomcorp.github.io/themes/
预览和选择需要的配色
对于满意的主题配色点copy theme
加入配置文件的
schemes词条中
如：
&amp;#34;schemes&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Chester&amp;#34;, &amp;#34;black&amp;#34;: &amp;#34;#080200&amp;#34;, &amp;#34;red&amp;#34;: &amp;#34;#fa5e5b&amp;#34;, &amp;#34;green&amp;#34;: &amp;#34;#16c98d&amp;#34;, &amp;#34;yellow&amp;#34;: &amp;#34;#ffc83f&amp;#34;, &amp;#34;blue&amp;#34;: &amp;#34;#288ad6&amp;#34;, &amp;#34;purple&amp;#34;: &amp;#34;#d34590&amp;#34;, &amp;#34;cyan&amp;#34;: &amp;#34;#28ddde&amp;#34;, &amp;#34;white&amp;#34;: &amp;#34;#e7e7e7&amp;#34;, &amp;#34;brightBlack&amp;#34;: &amp;#34;#6f6b68&amp;#34;, &amp;#34;brightRed&amp;#34;: &amp;#34;#fa5e5b&amp;#34;, &amp;#34;brightGreen&amp;#34;: &amp;#34;#16c98d&amp;#34;, &amp;#34;brightYellow&amp;#34;: &amp;#34;#feef6d&amp;#34;, &amp;#34;brightBlue&amp;#34;: &amp;#34;#278ad6&amp;#34;, &amp;#34;brightPurple&amp;#34;: &amp;#34;#d34590&amp;#34;, &amp;#34;brightCyan&amp;#34;: &amp;#34;#27dede&amp;#34;, &amp;#34;brightWhite&amp;#34;: &amp;#34;#ffffff&amp;#34;, &amp;#34;background&amp;#34;: &amp;#34;#2c3643&amp;#34;, &amp;#34;foreground&amp;#34;: &amp;#34;#ffffff&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;Hipster Green&amp;#34;, &amp;#34;black&amp;#34;: &amp;#34;#000000&amp;#34;, &amp;#34;red&amp;#34;: &amp;#34;#b6214a&amp;#34;, &amp;#34;green&amp;#34;: &amp;#34;#00a600&amp;#34;, &amp;#34;yellow&amp;#34;: &amp;#34;#bfbf00&amp;#34;, &amp;#34;blue&amp;#34;: &amp;#34;#246eb2&amp;#34;, &amp;#34;purple&amp;#34;: &amp;#34;#b200b2&amp;#34;, &amp;#34;cyan&amp;#34;: &amp;#34;#00a6b2&amp;#34;, &amp;#34;white&amp;#34;: &amp;#34;#bfbfbf&amp;#34;, &amp;#34;brightBlack&amp;#34;: &amp;#34;#666666&amp;#34;, &amp;#34;brightRed&amp;#34;: &amp;#34;#e50000&amp;#34;, &amp;#34;brightGreen&amp;#34;: &amp;#34;#86a93e&amp;#34;, &amp;#34;brightYellow&amp;#34;: &amp;#34;#e5e500&amp;#34;, &amp;#34;brightBlue&amp;#34;: &amp;#34;#0000ff&amp;#34;, &amp;#34;brightPurple&amp;#34;: &amp;#34;#e500e5&amp;#34;, &amp;#34;brightCyan&amp;#34;: &amp;#34;#00e5e5&amp;#34;, &amp;#34;brightWhite&amp;#34;: &amp;#34;#e5e5e5&amp;#34;, &amp;#34;background&amp;#34;: &amp;#34;#100b05&amp;#34;, &amp;#34;foreground&amp;#34;: &amp;#34;#84c138&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;Monokai Soda&amp;#34;, &amp;#34;black&amp;#34;: &amp;#34;#1a1a1a&amp;#34;, &amp;#34;red&amp;#34;: &amp;#34;#f4005f&amp;#34;, &amp;#34;green&amp;#34;: &amp;#34;#98e024&amp;#34;, &amp;#34;yellow&amp;#34;: &amp;#34;#fa8419&amp;#34;, &amp;#34;blue&amp;#34;: &amp;#34;#9d65ff&amp;#34;, &amp;#34;purple&amp;#34;: &amp;#34;#f4005f&amp;#34;, &amp;#34;cyan&amp;#34;: &amp;#34;#58d1eb&amp;#34;, &amp;#34;white&amp;#34;: &amp;#34;#c4c5b5&amp;#34;, &amp;#34;brightBlack&amp;#34;: &amp;#34;#625e4c&amp;#34;, &amp;#34;brightRed&amp;#34;: &amp;#34;#f4005f&amp;#34;, &amp;#34;brightGreen&amp;#34;: &amp;#34;#98e024&amp;#34;, &amp;#34;brightYellow&amp;#34;: &amp;#34;#e0d561&amp;#34;, &amp;#34;brightBlue&amp;#34;: &amp;#34;#9d65ff&amp;#34;, &amp;#34;brightPurple&amp;#34;: &amp;#34;#f4005f&amp;#34;, &amp;#34;brightCyan&amp;#34;: &amp;#34;#58d1eb&amp;#34;, &amp;#34;brightWhite&amp;#34;: &amp;#34;#f6f6ef&amp;#34;, &amp;#34;background&amp;#34;: &amp;#34;#1a1a1a&amp;#34;, &amp;#34;foreground&amp;#34;: &amp;#34;#c4c5b5&amp;#34; } ], 之后在如下词条中加入对应配置即可</description>
    </item>
    
    <item>
      <title>Win10下用Hugo把博客搭建到gitpages上(旧版)</title>
      <link>http://stc214.github.io/posts/2020_06_30_02_41_35/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://stc214.github.io/posts/2020_06_30_02_41_35/</guid>
      <description>环境准备 1. hugo环境 https://github.com/gohugoio/hugo/releases 如上地址下载对系统所需要的二进制文件 当然如果系统部署了包管理环境的话则可以直接使用工具安装 2. 配置系统环境变量（win） 将hugo.exe的路径放入系统环境变量的path中 重新打开终端  站点创建操作 1. 定位目录 在终端中切换到需要生成站点的目录 2. 创建初始站点 hugo new site sitename 切换到sitename目录即可进行下一步操作
3. 选择主题文件并应用样式  https://themes.gohugo.io/ 在官方主题站拉取主题到对应主题目录 复制主题exampleSite目录内的所有内容并覆盖到根目录 打开根目录的config.toml并根据需求修改内容即可 修改完毕后在根目录使用
hugo server 即可预览效果
 4.部署到github  1.根目录
&amp;gt; hugo &amp;gt; ``` &amp;gt; 即可生成需要推送到git的项目静态文件于public目录中 &amp;gt; 2.切换到public目录 &amp;gt; 在git已经配置好的情况下 &amp;gt; 打开github并创建新仓库 &amp;gt; 仓库名必须为： [当前用户名].github.io &amp;gt; ```bash &amp;gt; git init &amp;gt; git remote add origin [仓库地址].git &amp;gt; git add . &amp;gt; git commit -m &amp;#39;#&amp;#39; &amp;gt; git push -u origin master &amp;gt; ``` 之后即可访问https://[当前用户名].</description>
    </item>
    
    <item>
      <title>wordpress docker版 从ubuntu装好到打开博客01</title>
      <link>http://stc214.github.io/posts/2020_06_30_15_04_17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://stc214.github.io/posts/2020_06_30_15_04_17/</guid>
      <description>apt换源 # 备份源地址文件 cp /etc/apt/sources.list /etc/apt/sources.list.bak # 编辑源地址文件 vim /etc/apt/sources.list # 替换源地址 一般没有特别情况直接讲域名替换为国内源的域名即可 其他内容无需修改 # vim内搜索为 esc :/搜索内容 国内源： mirrors.aliyun.com 阿里云
mirrors.tuna.tsinghua.edu.cn 清华
mirrors.ustc.edu.cn 中科大 mirrors.163.com 163
apt update apt upgrade -y 设定静态ip 默认情况下 网络配置文件内容如下 ubuntu1804:~$ cat /etc/netplan/50-cloud-init.yaml
network: ethernets: eth0: dhcp4: true addresses: [] version: 2 复制一份文件备份以防万一
cp /etc/netplan/50-cloud-init.yaml /etc/netplan/50-cloud-init.yaml.bak 修改文件内容
vim /etc/netplan/50-cloud-init.yaml 关闭dhcp4
dhcp4: false 设置静态ip 掩码网关和dns服务器（一定要填dns服务器，否则会导致docker出现莫名其妙的500错误）成品为：
network: ethernets: eth0: dhcp4: false addresses: [192.168.1.100/24] optional: true gateway4: 192.168.1.1 nameservers: addresses: [223.</description>
    </item>
    
    <item>
      <title>wordpress docker版 从ubuntu装好到打开博客02</title>
      <link>http://stc214.github.io/posts/2020_06_30_15_02_26/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://stc214.github.io/posts/2020_06_30_15_02_26/</guid>
      <description>docker # 以树莓派ubuntu server 20.04版为例 apt install docker.io -y linux版本不同docker安装的版本可能也不同 一般有 docker / docker-ce / docker.io 等
换源 # 先运行一次docker命令 生成文件 docker images # 备份源文件（如果有） cp /etc/docker/daemon.json /etc/docker/daemon.json.bak # 编辑 vim /etc/docker/daemon.json # 填入内容 { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://docker.mirrors.ustc.edu.cn&amp;#34;] } # 保存退出并重启docker service docker restart 其他docker源参考:
不得不说 docker的火爆程度已经达到的地步， 由于国外docker搭建太慢，国外的安装文档也很全面，这里就不在详述，详情可以点击这里： 正主：Docker 官方镜像加速：http://www.docker-cn.com/registry-mirror 在这里打算记录下使用国内源快速搭建docker的方法：Daocloud极速下载真的是快啊～～～ 在 Linux上 安装 Docker curl -sSL https://get.daocloud.io/docker | sh 适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源 当然有时候不知道为什么daocloud响应不了，用阿里云的： 用阿里云的： 安装最新版本的Docker Engine curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet| sh - 安装1.9.1版本的Docker Engine curl -sSL http://acs-public-mirror.</description>
    </item>
    
    <item>
      <title>wordpress docker版 从ubuntu装好到打开博客03</title>
      <link>http://stc214.github.io/posts/2020_06_30_14_57_09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://stc214.github.io/posts/2020_06_30_14_57_09/</guid>
      <description>发布 绑定域名 访问 简单的局域网环境访问 直接用过ip+设置的端口即可直接访问 如果路由器有端口转发功能也需要设置
外网访问 1.通过ddns将设置的域名解析到路由器上
2.设置路由器防火墙规则 品牌路由官方固件则直接无视 一般防火墙规则会在设置端口转发等相关功能之后自动设置 软路由则按照规则（不了解则默认全部选择接受）设置
3.设置端口转发
OK 到此应该可以正常公网使用域名访问了
访问不了  通过命令行刷新dns缓存 检查ddns设置 检查ddns日志是否成功更新ip 检查域名是否已经更新好ip 一切正常依然无法访问再次刷新dns滑轮 步骤1-5全部检查无误依然不行则属于路由器固件问题  推荐lean的固件 下载地址在恩山论坛搜索
树莓派固件项目地址： https://github.com/SuLingGG/OpenWrt-Rpi https://github.com/scenerycm/OpenWrt-Raspi</description>
    </item>
    
    <item>
      <title>wordpress 必备插件</title>
      <link>http://stc214.github.io/posts/2020_06_30_15_04_54/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://stc214.github.io/posts/2020_06_30_15_04_54/</guid>
      <description>WP-China-Yes  这是一个颠覆性的插件，她将全面改善中国大陆站点在访问WP官方服务时的用户体验，其原理是将位于国外的官方仓库源替换为由社区志愿者维护的国内源，以此达到加速访问的目的。
 Autoptimize  通过优化CSS，JS，图像，Google字体等来使您的网站更快。
 Enlighter - Customizable Syntax Highlighter  语法高亮插件
 Really Simple CAPTCHA  验证码插件
 WP Githuber MD  markdown编辑器 一个为 WordPress 网站提供全功能 Markdown 语法的插件。
 WP User Avatar  使用WordPress媒体库中的图片作为默认头像。请添加您自己的默认头像。
 待补充 </description>
    </item>
    
    <item>
      <title>关于定时执行任务：Crontab的20个例子</title>
      <link>http://stc214.github.io/posts/2020_06_30_15_02_59/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://stc214.github.io/posts/2020_06_30_15_02_59/</guid>
      <description>简介
Linux crontab和Windows task schedules非常的相似。Crontab可以用来在系统中定期的执行任务。比如：写了一个爬虫需要每天早上八点执行，就可以用到Crontab;安装的Tomcat服务器需要每天凌晨重启一次，也可以使用到Crontab。总之，几乎所有的定时任务，我们都可以通过Crontab这个工具来完成。 安装 yum install cronie` Crontab在Linux上的结构
crontab结构.png
从左到右依次为： [分钟] [小时] [每月的某一天] [每年的某一月] [每周的某一天] [执行的命令] 注意：请留意每个选项的取值范围。
如何 添加/编辑 Crontab
添加或更新crontab中的命令  crontab -e
默认情况下，系统会编辑当前登录用户的crontab命令集合。需要编辑其他用户的命令集合，需要使用到如下的命令 crontab -u username -e 查看Crontab命令集合
查看当前系统登录用户的Crontab命令集合  crontab -l
查看其他用户的Crontab命令集合  crontab -u username -l 20个超实用的Crontab使用实例
每天 02:00 执行任务  0 2 * * * /bin/sh backup.sh
每天 5:00和17:00执行任务  0 5,17 * * * /scripts/script.sh
每分钟执行一次任务 通常情况下，我们并没有每分钟都需要执行的脚本(默默的想到了12306--)           /scripts/script.</description>
    </item>
    
    <item>
      <title>开启 cmd cmder 代理</title>
      <link>http://stc214.github.io/posts/2020_06_30_14_48_30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://stc214.github.io/posts/2020_06_30_14_48_30/</guid>
      <description>win10安装了ShadowSocks软件，浏览器通过代理后就可以***，但有时候需要通过cmd科学下载安装一些组件，就需要设置一下cmd的代理
cmd如果要设置代理的话，需要在执行其他命令之前，先执行一下
set http_proxy=http://127.0.0.1:7008 set https_proxy=http://127.0.0.1:7008 cmder如果使用的是bash模式，则先执行一下
export http_proxy=http://127.0.0.1:7008 export https_proxy=http://127.0.0.1:7008 PowerShell ：
$env:http_proxy=http://127.0.0.1:7008 $env:https_proxy=http://127.0.0.1:7008 上面命令的作用是设置环境变量，不用担心，这种环境变量只会持续到cmd窗口关闭，不是系统环境变量
测试是否成功用 curl https://www.google.com, 别用ping</description>
    </item>
    
  </channel>
</rss>