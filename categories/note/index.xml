<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>note on STC214</title>
    <link>https://stc214.github.io/categories/note/</link>
    <description>Recent content in note on STC214</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://stc214.github.io/categories/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker管理面板系列——Portainer(简单、美观、强大)</title>
      <link>https://stc214.github.io/posts/2020_06_30_14_57_42/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stc214.github.io/posts/2020_06_30_14_57_42/</guid>
      <description>原文：http://www.senra.me/docker-management-panel-series-portainer/
一.介绍
Portainer是个轻量级的Docker管理面板，和Rancher这种重量级选手没法比，Portainer倾向于单机的管理(后来发现能够添加多个单机节点切换着管理)，当然，在Docker搞出Swarm之后Portainer也借此实现了集群管理。
使用官方提供的Demo预览一下
地址: http://demo.portainer.io/ 用户名: admin 密码: tryportainer
你会有一种眼前一亮的感觉，美观，而且功能全面(从边上这一长列就能感受出来)
虽然选项很多，但是其实就是命令行操作的简化，如果你用过Docker的命令行操作你能很快熟悉Portainer，和Rancher那种多了很多新花样不一样，Rancher的很多东西你看上去是摸不着头脑的，必须看着文档试一下才能大概弄清楚这是个啥。
二.安装
是不是眼馋了？那么就让我们装一下玩玩吧。
这是Portainer对Docker各版本的支持情况
Portainer的安装方式主要有两种，一个是使用Docker安装，一个是二进制文件直接跑，我建议用Docker安装，比较方便点，也不用你自己去配置自启动啥的。 其他的请参考官方文档 ——&amp;gt; 传送门
首先，我们得先把Unix套接字或者TCP监听打开，来方便连接(不过似乎Unix套接字默认是启用的，TCP需要自己开)</description>
    </item>
    
    <item>
      <title>Win10 2004版 win terminal 下载和配色</title>
      <link>https://stc214.github.io/posts/2020_06_30_14_56_01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stc214.github.io/posts/2020_06_30_14_56_01/</guid>
      <description>下载 本步骤可能需要梯子
打开任务栏搜索图标
搜索store 打开
搜索terminal
下载安装即可
简单配置 打开win terminal
点窗口标题栏的 +
点设置打开配置文件
对应词条修改成如下样式 &amp;ldquo;copyOnSelect&amp;rdquo;: true,
其他选项根据需求配置
更改配色 打开 https://atomcorp.github.io/themes/</description>
    </item>
    
    <item>
      <title>Win10下用Hugo把博客搭建到gitpages上(旧版)</title>
      <link>https://stc214.github.io/posts/2020_06_30_02_41_35/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stc214.github.io/posts/2020_06_30_02_41_35/</guid>
      <description>环境准备 1. hugo环境 https://github.com/gohugoio/hugo/releases 如上地址下载对系统所需要的二进制文件 当然如果系统部署了包管理环境的话则可以直接使用工具安装 2. 配置系统环境变量（win） 将hugo.exe的路径放入系统环境变量的path中 重新打开终端  站点创建操作 1. 定位目录 在终端中切换到需要生成站点的目录 2. 创建初始站点 hugo new site sitename 切换到sitename目录即可进行下一步操作</description>
    </item>
    
    <item>
      <title>wordpress docker版 从ubuntu装好到打开博客01</title>
      <link>https://stc214.github.io/posts/2020_06_30_15_04_17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stc214.github.io/posts/2020_06_30_15_04_17/</guid>
      <description>apt换源 # 备份源地址文件 cp /etc/apt/sources.list /etc/apt/sources.list.bak # 编辑源地址文件 vim /etc/apt/sources.list # 替换源地址 一般没有特别情况直接讲域名替换为国内源的域名即可 其他内容无需修改 # vim内搜索为 esc :/搜索内容 国内源： mirrors.aliyun.com 阿里云</description>
    </item>
    
    <item>
      <title>wordpress docker版 从ubuntu装好到打开博客02</title>
      <link>https://stc214.github.io/posts/2020_06_30_15_02_26/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stc214.github.io/posts/2020_06_30_15_02_26/</guid>
      <description>docker # 以树莓派ubuntu server 20.04版为例 apt install docker.io -y linux版本不同docker安装的版本可能也不同 一般有 docker / docker-ce / docker.io 等
换源 # 先运行一次docker命令 生成文件 docker images # 备份源文件（如果有） cp /etc/docker/daemon.</description>
    </item>
    
    <item>
      <title>wordpress docker版 从ubuntu装好到打开博客03</title>
      <link>https://stc214.github.io/posts/2020_06_30_14_57_09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stc214.github.io/posts/2020_06_30_14_57_09/</guid>
      <description>发布 绑定域名 访问 简单的局域网环境访问 直接用过ip+设置的端口即可直接访问 如果路由器有端口转发功能也需要设置
外网访问 1.通过ddns将设置的域名解析到路由器上
2.设置路由器防火墙规则 品牌路由官方固件则直接无视 一般防火墙规则会在设置端口转发等相关功能之后自动设置 软路由则按照规则（不了解则默认全部选择接受）设置
3.设置端口转发
OK 到此应该可以正常公网使用域名访问了
访问不了  通过命令行刷新dns缓存 检查ddns设置 检查ddns日志是否成功更新ip 检查域名是否已经更新好ip 一切正常依然无法访问再次刷新dns滑轮 步骤1-5全部检查无误依然不行则属于路由器固件问题  推荐lean的固件 下载地址在恩山论坛搜索</description>
    </item>
    
    <item>
      <title>wordpress 必备插件</title>
      <link>https://stc214.github.io/posts/2020_06_30_15_04_54/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stc214.github.io/posts/2020_06_30_15_04_54/</guid>
      <description>WP-China-Yes  这是一个颠覆性的插件，她将全面改善中国大陆站点在访问WP官方服务时的用户体验，其原理是将位于国外的官方仓库源替换为由社区志愿者维护的国内源，以此达到加速访问的目的。
 Autoptimize  通过优化CSS，JS，图像，Google字体等来使您的网站更快。
 Enlighter - Customizable Syntax Highlighter  语法高亮插件
 Really Simple CAPTCHA  验证码插件</description>
    </item>
    
    <item>
      <title>关于定时执行任务：Crontab的20个例子</title>
      <link>https://stc214.github.io/posts/2020_06_30_15_02_59/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stc214.github.io/posts/2020_06_30_15_02_59/</guid>
      <description>简介
Linux crontab和Windows task schedules非常的相似。Crontab可以用来在系统中定期的执行任务。比如：写了一个爬虫需要每天早上八点执行，就可以用到Crontab;安装的Tomcat服务器需要每天凌晨重启一次，也可以使用到Crontab。总之，几乎所有的定时任务，我们都可以通过Crontab这个工具来完成。 安装 yum install cronie` Crontab在Linux上的结构
crontab结构.png
从左到右依次为： [分钟] [小时] [每月的某一天] [每年的某一月] [每周的某一天] [执行的命令] 注意：请留意每个选项的取值范围。
如何 添加/编辑 Crontab</description>
    </item>
    
    <item>
      <title>开启 cmd cmder 代理</title>
      <link>https://stc214.github.io/posts/2020_06_30_14_48_30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stc214.github.io/posts/2020_06_30_14_48_30/</guid>
      <description>win10安装了ShadowSocks软件，浏览器通过代理后就可以***，但有时候需要通过cmd科学下载安装一些组件，就需要设置一下cmd的代理
cmd如果要设置代理的话，需要在执行其他命令之前，先执行一下
set http_proxy=http://127.0.0.1:7008 set https_proxy=http://127.0.0.1:7008 cmder如果使用的是bash模式，则先执行一下
export http_proxy=http://127.0.0.1:7008 export https_proxy=http://127.0.0.1:7008 PowerShell ：
$env:http_proxy=http://127.0.0.1:7008 $env:https_proxy=http://127.0.0.1:7008 上面命令的作用是设置环境变量，不用担心，这种环境变量只会持续到cmd窗口关闭，不是系统环境变量
测试是否成功用 curl https://www.google.com, 别用ping</description>
    </item>
    
  </channel>
</rss>